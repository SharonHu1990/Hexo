{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/yilia/source/sun.ico","path":"sun.ico","modified":0},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/yilia/source/assets/blogImg/sun.png","path":"assets/blogImg/sun.png","modified":0}],"Cache":[{"_id":"source/_posts/Bundle version VS Bundle versions string.markdown","shasum":"dc08333e05d7a765c57eadcda9be6a6f7376a324","modified":1444355554000},{"_id":"source/_posts/HScrollViewWithTitleAndSlide.md","shasum":"023216309d88c771740504f6bd91d529ecb7ef41","modified":1445333009000},{"_id":"source/_posts/Markdown为写作而生.md","shasum":"8b74ae286bab6c3cc40da3a3ba31a886170641cf","modified":1442994738000},{"_id":"source/_posts/Hexo使用多说插件.md","shasum":"55655fc32482476736c275b97fda788c33f34c59","modified":1442993901000},{"_id":"source/_posts/_config.yml","shasum":"0a20a11f61f5923eb9e9a37a9e114d09b8e9ce42","modified":1445910395000},{"_id":"source/_posts/iOS开发总结.md","shasum":"e1f462eea43e0cb8708f55ff358f698036885afc","modified":1445333551000},{"_id":"source/_posts/index.html","shasum":"a86d83242e8e09e834f8fd62b5af587d9fd270aa","modified":1446434959000},{"_id":"source/_posts/什么是EXC-BAD-ACCESS以及如何调试.md","shasum":"2a0b64d8a1f098140048f0fe059cb1b7150f6ff9","modified":1446171836000},{"_id":"source/_posts/Swift Cheat Sheet [1] — Basic Types.md","shasum":"1c8b1ff6aaad64eaf6c0ff18fc5ce5ebdbf9da34","modified":1445480658000},{"_id":"source/_posts/Swift Cheat Sheet [2] - Control Flow.md","shasum":"a6724f6c6bed1097e5b613f3506164edfcf2c410","modified":1446175049000},{"_id":"source/_posts/使用网络代理造成Archive submission failed with errors.md","shasum":"f6cb1ce51214413016adb86d4366576fac9832ca","modified":1444357821000},{"_id":"source/_posts/什么是EXC_BAD_ACCESS以及如何调试.md","shasum":"9db837b568d2d0c13a62563e490ad62fc375b361","modified":1446199758000},{"_id":"source/_posts/新的开篇.markdown","shasum":"0bf78f2c34c4bc9a404cdb00b8762e5a39ff1a79","modified":1442994483000},{"_id":"source/_posts/以此纪念2015年最后一个长假的结束.md","shasum":"a319be7557e4b6d8ee58c19421fb3317e8020807","modified":1444359942000},{"_id":"source/_posts/写在与家人视频之后.md","shasum":"5fd4fdaaa15051912a13fc90e6ca347fb0f801e0","modified":1442994472000},{"_id":"source/_posts/胡言乱语.markdown","shasum":"f9802d98bfe83ae6e11b243d5b67890e1ffdd02d","modified":1442994351000},{"_id":"source/_posts/纪·彩虹蛋糕.md","shasum":"28ec8f06edec438417ad4c8827efca667c6c35d3","modified":1444358551000},{"_id":"source/_posts/浅析UITableViewCell重用机制.md","shasum":"cf1ac1019d0024b9ba22008a1bfbc75e4bf3caa2","modified":1446175049000},{"_id":"source/_posts/良好的编程习惯.md","shasum":"a236d61d3e268363a62e88d9e450045f7e87263b","modified":1442994451000},{"_id":"source/_posts/花绘一二幅.markdown","shasum":"89ab54c91e6181581bd952af888dff74fe5dd8eb","modified":1442994383000},{"_id":"source/about/index.md","shasum":"80fdb53c1b35f95d86f0b7954301b1b4705e9b57","modified":1445909775000},{"_id":"source/_posts/观《被嫌弃的松子的一生》有感.md","shasum":"b2f5c85f363ebbed21a41a0b852b65239d0c9998","modified":1444809401000},{"_id":"source/_posts/记住回家的路.md","shasum":"05d1b681f9ebbfc36f29eb765f417f51b229ec42","modified":1442994439000},{"_id":"source/instagram/index.md","shasum":"ab97c9f0d5f09263f3110f42e8344e1c32ef468a","modified":1444380851000},{"_id":"themes/yilia/_config.yml","shasum":"5409d7cb2336011c9464ae81076ea94bc9d51262","modified":1446175049000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"970c3d5c6b8c9c2f5e2726132297ec63cfb5a472","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"d3d2a1c223936b129cb70dca614d77725d5be71e","modified":1442994080000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/baidu_tongji.ejs","shasum":"4f7a913c1ddeceda10d4e1a92e451301a859ada0","modified":1442988192000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"4243c8827b488e73bddb68f939947760c5fe05de","modified":1442988351000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"b8171ba0e51eb5096f7ab46816a0091b158acb5a","modified":1442988914000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"70e87ff777d09a91c5668ff4fba2cd129c413047","modified":1442988791000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"70a9951e4e2d30aabba88e75c3fa54b9235ce6a6","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"cd0af87ee781ac9c2b0e6a2a05b063d4bd497d9c","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","shasum":"da39b4ba0c0ce4e1932fd45c5aee10e8aca41f28","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1441861668000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1441861668000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1441861668000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1442989636000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1441861668000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1441861668000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"6a281e4f249e16150af8b0029da94867c90e0b11","modified":1442994205000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1442989618000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1444379556000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1441861668000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1441861668000},{"_id":"themes/yilia/source/assets/blogImg/sun.png","shasum":"e63629e38a46ea74a8e7c12b8df00b452663eff0","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"2abf8c5005e0fcafae0b1b9517ac04c8ed37a54e","modified":1442992876000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"8cadf8437ce6f372802d3d28617a1ab97e7c818e","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"4268f759920106a576c6037264076b36018ff73b","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1441861668000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1441861668000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1441861668000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1441861668000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1441861668000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1441861668000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1441861668000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1441861668000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1441861668000},{"_id":"themes/yilia/source/css/style.styl","shasum":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1442991036000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1441861668000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1441861668000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1441861668000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1441861668000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1441861668000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1441861668000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1441861668000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1441861668000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1441861668000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1441861668000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1441861668000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1441861668000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1441861668000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1441861668000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1441861668000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1441861668000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1441861668000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1441861668000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1441861668000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1441861668000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1441861668000},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1441861668000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1441861668000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1441861668000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1441861668000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1441861668000},{"_id":"themes/yilia/source/sun.ico","shasum":"360bbc6ed060ae75f008f8fe4a2be4c461ccedd0","modified":1441861668000},{"_id":"public/sun.ico","modified":1446520192269,"shasum":"360bbc6ed060ae75f008f8fe4a2be4c461ccedd0"},{"_id":"public/js/pc.js","modified":1446520192294,"shasum":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10"},{"_id":"public/js/mobile.js","modified":1446520192295,"shasum":"b68cc01d24e80973c48205f551da87f3f3427644"},{"_id":"public/js/main.js","modified":1446520192299,"shasum":"0640b68a76fab3c693b3cd1e4d04d14be1e53940"},{"_id":"public/js/jquery.lazyload.js","modified":1446520192301,"shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799"},{"_id":"public/js/instagram.js","modified":1446520192302,"shasum":"f19adbcc0dac33536bc6660598059048ec901882"},{"_id":"public/img/zhihu.png","modified":1446520192305,"shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d"},{"_id":"public/img/weibo.png","modified":1446520192307,"shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b"},{"_id":"public/img/twitter.png","modified":1446520192309,"shasum":"14dbb8e62d056525253bc0de13acd1723da7a934"},{"_id":"public/img/stackoverflow.png","modified":1446520192311,"shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2"},{"_id":"public/img/scrollbar_arrow.png","modified":1446520192312,"shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0"},{"_id":"public/img/rss.png","modified":1446520192313,"shasum":"430fd47340e75214c081abd05cd7410cf7c71b86"},{"_id":"public/img/pinterest.png","modified":1446520192316,"shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630"},{"_id":"public/img/pinboard.png","modified":1446520192317,"shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0"},{"_id":"public/img/mail.png","modified":1446520192320,"shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7"},{"_id":"public/img/linkedin.png","modified":1446520192322,"shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c"},{"_id":"public/img/img-loading.png","modified":1446520192324,"shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031"},{"_id":"public/img/img-err.png","modified":1446520192325,"shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b"},{"_id":"public/img/google.png","modified":1446520192327,"shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d"},{"_id":"public/img/github.png","modified":1446520192328,"shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d"},{"_id":"public/img/facebook.png","modified":1446520192330,"shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54"},{"_id":"public/img/douban.png","modified":1446520192331,"shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e"},{"_id":"public/img/delicious.png","modified":1446520192332,"shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd"},{"_id":"public/img/coderwall.png","modified":1446520192334,"shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1446520192336,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1446520192338,"shasum":"a82597493d75ea989ca586e09173cff332efe41e"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1446520192339,"shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1446520192340,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1446520192342,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1446520192343,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1446520192344,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1446520192345,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1446520192347,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1446520192349,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1446520192351,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1446520192353,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1446520192354,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1446520192355,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1446520192358,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1446520193242,"shasum":"5e7615848b5f5b7f6e55794d352c1888984524b2"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1446520193515,"shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1446520193517,"shasum":"1480b8101b02da9bc4c60341b5e185e63e585064"},{"_id":"public/css/fonts/fontawesome-webfont.svgz","modified":1446520193518,"shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1446520193520,"shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1446520193521,"shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6"},{"_id":"public/assets/blogImg/sun.png","modified":1446520193523,"shasum":"e63629e38a46ea74a8e7c12b8df00b452663eff0"},{"_id":"public/instagram/index.html","modified":1446520193589,"shasum":"abba94442abae379ddfcbf59fb7f8b03165fbdb6"},{"_id":"public/about/index.html","modified":1446520193626,"shasum":"39937aa6e65480634df46ee083d576fdbd987f25"},{"_id":"public/2015/11/03/index/index.html","modified":1446520193657,"shasum":"bb00fb0bb0d9eae82f5908abf3455fa7f5759689"},{"_id":"public/2015/10/30/什么是EXC-BAD-ACCESS以及如何调试/index.html","modified":1446520193668,"shasum":"7b030df2bd8cb442e82b793c9902852cbefa88ff"},{"_id":"public/2015/10/30/什么是EXC_BAD_ACCESS以及如何调试/index.html","modified":1446520193688,"shasum":"4f70fd644d87a512226e4af244a8e12395f008be"},{"_id":"public/2015/10/28/浅析UITableViewCell重用机制/index.html","modified":1446520193711,"shasum":"eca699efdb37d056491fcb638d6d063e13bdfbc6"},{"_id":"public/2015/10/22/Swift Cheat Sheet [2] - Control Flow/index.html","modified":1446520193729,"shasum":"a075a11a8ec38840f6da47febb8848e317246655"},{"_id":"public/2015/10/21/Swift Cheat Sheet [1] — Basic Types/index.html","modified":1446520193752,"shasum":"e166f2fa7e09c24aebf70dc73421e7fb582ca206"},{"_id":"public/2015/10/20/HScrollViewWithTitleAndSlide/index.html","modified":1446520193764,"shasum":"bf7685360c089ae8fbec3cbceb038c259b95ea2c"},{"_id":"public/2015/10/15/iOS开发总结/index.html","modified":1446520193777,"shasum":"2d83e095c463fefb21210d20226c50c460a5d33e"},{"_id":"public/2015/10/11/观《被嫌弃的松子的一生》有感/index.html","modified":1446520193790,"shasum":"1e70d6ae09d960f9d47163ecfb082709c309d174"},{"_id":"public/2015/10/09/使用网络代理造成Archive submission failed with errors/index.html","modified":1446520193799,"shasum":"ac16abe28f3b6cbd5980601fd667806e775fae60"},{"_id":"public/2015/10/08/以此纪念2015年最后一个长假的结束/index.html","modified":1446520193808,"shasum":"620356415214157dd091d83b4f9c2a62de8aa286"},{"_id":"public/2015/09/23/Hexo使用多说插件/index.html","modified":1446520193819,"shasum":"79998237ab80dea2191f476107a694d9a46c8e58"},{"_id":"public/2015/09/20/纪·彩虹蛋糕/index.html","modified":1446520193827,"shasum":"c22d18687a42c0b7588141a48aa9010cb4626c1f"},{"_id":"public/2015/09/20/Bundle version VS Bundle versions string/index.html","modified":1446520193837,"shasum":"c12a038abf3bf9ccd93d400f476f4aaf76aeedf7"},{"_id":"public/2015/09/16/Markdown为写作而生/index.html","modified":1446520193858,"shasum":"95813822ef545ae0a8c909b8e8d320cbec896595"},{"_id":"public/2015/09/15/良好的编程习惯/index.html","modified":1446520193866,"shasum":"6c06e638bb5c9aece95aee6ec24bb50c68ae541d"},{"_id":"public/2015/09/09/写在与家人视频之后/index.html","modified":1446520193878,"shasum":"2b0f3a3690c02a318b05997465c184a31e94054e"},{"_id":"public/2015/09/05/花绘一二幅/index.html","modified":1446520193886,"shasum":"7583985e968ffe5052cf603b84a63a0bed41cee6"},{"_id":"public/2015/09/01/记住回家的路/index.html","modified":1446520193894,"shasum":"31c9d6aa1b98ae53fa7828857060c52db5166f56"},{"_id":"public/2015/09/01/胡言乱语/index.html","modified":1446520193901,"shasum":"b3b6aa24d294fa3ae288a1c10174e2e3385a0123"},{"_id":"public/2015/09/01/新的开篇/index.html","modified":1446520193911,"shasum":"56aea695561150eebbc37d1cc00ccc86f3ef184d"},{"_id":"public/archives/index.html","modified":1446520193934,"shasum":"87c722b40cfd87d2278dab55dc181b706faa64ee"},{"_id":"public/archives/page/2/index.html","modified":1446520193962,"shasum":"0dd4c6f86a98f8a88527c249e73720e6d3f2b35b"},{"_id":"public/archives/page/3/index.html","modified":1446520193975,"shasum":"a5cda695bc5b6b30b2b0f151907b3d5a71bc1992"},{"_id":"public/archives/2015/index.html","modified":1446520193994,"shasum":"a812f27bb83df884b3a70961b4c7da779f197480"},{"_id":"public/archives/2015/page/2/index.html","modified":1446520194013,"shasum":"15fb99e6d950b06c25399a66e248c3882eaa73d9"},{"_id":"public/archives/2015/page/3/index.html","modified":1446520194027,"shasum":"11c94182fcc766ddf6a5ab84cc628df3f9271853"},{"_id":"public/archives/2015/09/index.html","modified":1446520194048,"shasum":"74022c4744e4e5347da4d201f3c76e298c37a169"},{"_id":"public/archives/2015/09/page/2/index.html","modified":1446520194057,"shasum":"32bb3948365ad0eefac1b90f2649e251927786f3"},{"_id":"public/archives/2015/10/index.html","modified":1446520194076,"shasum":"82eb3351ff9e9bf7002525233da00db104f51b5e"},{"_id":"public/archives/2015/10/page/2/index.html","modified":1446520194085,"shasum":"f0aeb1ffbca2ca2f5e2da0a5bdc184a50a27cf15"},{"_id":"public/archives/2015/11/index.html","modified":1446520194091,"shasum":"00c6ab9f28c779a9f21d3abbb54263cf77ffcb0e"},{"_id":"public/categories/iOS/index.html","modified":1446520194111,"shasum":"d3495d20f9e67a4114246b1b93250fb033f4c6d3"},{"_id":"public/categories/电影/index.html","modified":1446520194118,"shasum":"a5dcfb9ebcca6a664533c7a91f1b8369195b03a1"},{"_id":"public/categories/生活/index.html","modified":1446520194125,"shasum":"fef40e35fd034e4e8d1f0f0639fa8522aa98fe7b"},{"_id":"public/index.html","modified":1446520194147,"shasum":"ac6725fd1e2cddc44ebc348eda2e8b2b21ec5d40"},{"_id":"public/page/2/index.html","modified":1446520194169,"shasum":"cd3a6e79424239d4dd3ad171d4f6fdea3fd1724b"},{"_id":"public/page/3/index.html","modified":1446520194183,"shasum":"1706397928d3297969cdc2f501ee51135d1f6714"},{"_id":"public/tags/知识小集/index.html","modified":1446520194202,"shasum":"b669bf91daa4e028666fc5a1b4ba8f2a5067c20a"},{"_id":"public/tags/iOS/index.html","modified":1446520194223,"shasum":"bb5de36ae1b384a934a1c43e4388f1ef61c4bab4"},{"_id":"public/tags/Xcode/index.html","modified":1446520194229,"shasum":"650790b145d03228f9717f273a2c2776ecbfe108"},{"_id":"public/tags/版本号/index.html","modified":1446520194236,"shasum":"4e73d4aef0bf4effddeb07bc3aedb6dc65f09fe0"},{"_id":"public/tags/杂谈/index.html","modified":1446520194250,"shasum":"214c6bfde0bb929a731c2b3692f953a63e01da52"},{"_id":"public/tags/读书札记/index.html","modified":1446520194256,"shasum":"76960d616e99ce443e9bfb33927b385c74186553"},{"_id":"public/tags/电影/index.html","modified":1446520194262,"shasum":"bd0716ab2dafb02463886a51cc963a8649ffc7e6"},{"_id":"public/tags/感悟/index.html","modified":1446520194268,"shasum":"b171aac543a784d3946a0e92b311f520a176b5d8"},{"_id":"public/tags/水彩/index.html","modified":1446520194275,"shasum":"fe307fcd2ee44adb23123d818665ae43be20c5db"},{"_id":"public/tags/爱好/index.html","modified":1446520194281,"shasum":"5702a368356e826c46999682077d496d7826edcf"},{"_id":"public/tags/生活/index.html","modified":1446520194293,"shasum":"41a90e514a235108e3529ebde4413f3502adf7d3"},{"_id":"public/tags/程序人生/index.html","modified":1446520194299,"shasum":"c3a907fb823ebd60994e9dcb6a9030ab150f640c"},{"_id":"public/tags/编程习惯/index.html","modified":1446520194305,"shasum":"8835d6466d09b795b4eaba773cb798e24c0908df"},{"_id":"public/tags/诗/index.html","modified":1446520194311,"shasum":"b8733099a915dd53c9be1ebf04ff71293ad9d250"},{"_id":"public/tags/随笔/index.html","modified":1446520194320,"shasum":"283630bbe8089909fb7f31f9f9839b921179876d"},{"_id":"public/tags/生日/index.html","modified":1446520194326,"shasum":"98e2a0964f8de0e8a7889ef0042ff98bd022bebc"},{"_id":"public/tags/爱/index.html","modified":1446520194332,"shasum":"a2f76072a267a622c3b6314bd03daa4a207f714b"},{"_id":"public/tags/UITableView/index.html","modified":1446520194338,"shasum":"7dd0d99e8189ff68502d47e0bcb764a1b733f6f7"},{"_id":"public/tags/Archive-Submission/index.html","modified":1446520194345,"shasum":"9ec9a092b30ace1970c9615e7518cfdb0d8c06f9"},{"_id":"public/tags/总结/index.html","modified":1446520194352,"shasum":"d65af10575e4cb4c056b3c3c4156c00dfafeb2ac"},{"_id":"public/tags/假期/index.html","modified":1446520194360,"shasum":"dbbf2e0684c152baa3244b90b904d854ffa405c2"},{"_id":"public/tags/EXC-BAD-ACCESS，调试/index.html","modified":1446520194366,"shasum":"42ae719e3916b3d98ff256382c9940ee82953d48"},{"_id":"public/tags/Swift/index.html","modified":1446520194372,"shasum":"dfaf6f66f5cc75b4e092a95554159c8198bd6be7"},{"_id":"public/tags/Markdown/index.html","modified":1446520194378,"shasum":"a66d968f32bf780b0fb318c5a1bce5f0ee34149e"},{"_id":"public/tags/写作工具/index.html","modified":1446520194384,"shasum":"20b4e065131269d9ef715fb01cc3a37b9869243c"},{"_id":"public/tags/Hexo/index.html","modified":1446520194392,"shasum":"f74bec7fa47d7800f61a65e6f3cff252e70281b0"},{"_id":"public/tags/Demo/index.html","modified":1446520194399,"shasum":"7b1cb0bb1b2a952bef40f821e85d55a8a095acdb"}],"Category":[{"name":"iOS","_id":"cigisrtqa00012trnklf8r655"},{"name":"电影","_id":"cigisrtr5000j2trn1hy1m2wu"},{"name":"生活","_id":"cigisrtsa001v2trn4irgtwmt"}],"Data":[],"Page":[{"layout":"post","slug":"instagram","title":"相册","noDate":"true","comments":0,"_content":"<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n<div class=\"instagram\" data-client-id=\"e1e92f0343094970a241208ec2b8a268\" data-user-id=\"2208066691\">\n<a href=\"http://instagram.com/521world\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","source":"instagram/index.md","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: \"false\"\n---\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n<div class=\"instagram\" data-client-id=\"e1e92f0343094970a241208ec2b8a268\" data-user-id=\"2208066691\">\n<a href=\"http://instagram.com/521world\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","date":"2015-10-09T08:54:12.000Z","updated":"2015-10-09T08:54:11.000Z","path":"instagram/index.html","_id":"cigisrtqw000b2trnhv93bz3k"},{"title":"关于","date":"2015-08-28T03:37:04.000Z","_content":"　　欢迎来到Sharon's World!\n　　","source":"about/index.md","raw":"title: 关于\ndate: 2015-08-28 11:37:04\n---\n　　欢迎来到Sharon's World!\n　　","updated":"2015-10-27T01:36:15.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cigisrtqy000c2trn7wj3t67h"}],"Post":[{"title":"Bundle version VS Bundle versions string","date":"2015-09-20T06:14:23.000Z","toc":true,"_content":"\n\n\n\n> 今天上传新版本，在修改Bundle version和Bundle versions string的时候突然想到：一直以来都没有深究过这两个字段的真正含义，只是保持它们一样。那么它们真正的用途到底是什么呢？今天来探究一下。\n\n<!-- more -->\n\n\n## 区别\n### Bundle Version (CFBundleVersion) \n- Bundle Version是应用程序的内部版本号。\n- Bundle Version不需要是一个纯粹的版本号，它可以是1234，也可以是1.2.3(Build 12345AB)\n\n\n### Bundle Version String (CFBundleShortVersionString) \n- Bundle versions string 是应用程序公开可见的版本号。例如，你每次迭代一个内部测试版本时，都会生成一个版本号，这个版本号可能是2.0.0.12345b7，但是你不想让其公开可见，所以你设置应用程序的短版本号为2.0。\n- 必须与用于iTunes Connect的版本号保持一致。\n- Bundle Version String不能超过三个部分。例如：2.0.1是可以的，但是2.0.0.1是不可以的。\n- 当Bundle Version String缺省时，Bundle Version替代Bundle Version String的功能，同时也继承他的限制(比如格式，位数等)，展示在AppStore中。\n\n\n##  Xcode 设置自增编译版本号\n步骤：\n1. Info.plist 中设置Bundle Version String；\n2. Info.plist中Bundle version设置为数字 比如1，如果设置为其它，则可能会编译错误；\n3. 添加脚本\n    1. TARGETS -> Build Phases\n    2. 点击左上角的‘+’，在弹出的选择框中点击New Run Script Phase，如下图：\n    ![图1][1]\n    3. 在Run script中添加以下脚本：\n    \n\n    version=`/usr/libexec/PlistBuddy -c \"Print CFBundleVersion\" $PRODUCT_SETTINGS_PATH`\n    version=`expr $version + 1`\n    /usr/libexec/PlistBuddy -c \"Set :CFBundleVersion $version\" $PRODUCT_SETTINGS_PATH\n    #/usr/libexec/PlistBuddy -c \"Set :CFBundleShortVersionString $version\" $PRODUCT_SETTINGS_PATH 这行代码会让version也自增，一般不需要\n\n如图：\n![图1][2]\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-09-21%20%E4%B8%8B%E5%8D%883.55.49.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/09211611.png\n  \n\nOK,这样设置以后，每次编译，Build version都会自增1.","source":"_posts/Bundle version VS Bundle versions string.markdown","raw":"title: Bundle version VS Bundle versions string\ndate: 2015-09-20 14:14:23\ntags: [知识小集,iOS,Xcode,版本号]\ntoc: true\ncategory: iOS\n---\n\n\n\n\n> 今天上传新版本，在修改Bundle version和Bundle versions string的时候突然想到：一直以来都没有深究过这两个字段的真正含义，只是保持它们一样。那么它们真正的用途到底是什么呢？今天来探究一下。\n\n<!-- more -->\n\n\n## 区别\n### Bundle Version (CFBundleVersion) \n- Bundle Version是应用程序的内部版本号。\n- Bundle Version不需要是一个纯粹的版本号，它可以是1234，也可以是1.2.3(Build 12345AB)\n\n\n### Bundle Version String (CFBundleShortVersionString) \n- Bundle versions string 是应用程序公开可见的版本号。例如，你每次迭代一个内部测试版本时，都会生成一个版本号，这个版本号可能是2.0.0.12345b7，但是你不想让其公开可见，所以你设置应用程序的短版本号为2.0。\n- 必须与用于iTunes Connect的版本号保持一致。\n- Bundle Version String不能超过三个部分。例如：2.0.1是可以的，但是2.0.0.1是不可以的。\n- 当Bundle Version String缺省时，Bundle Version替代Bundle Version String的功能，同时也继承他的限制(比如格式，位数等)，展示在AppStore中。\n\n\n##  Xcode 设置自增编译版本号\n步骤：\n1. Info.plist 中设置Bundle Version String；\n2. Info.plist中Bundle version设置为数字 比如1，如果设置为其它，则可能会编译错误；\n3. 添加脚本\n    1. TARGETS -> Build Phases\n    2. 点击左上角的‘+’，在弹出的选择框中点击New Run Script Phase，如下图：\n    ![图1][1]\n    3. 在Run script中添加以下脚本：\n    \n\n    version=`/usr/libexec/PlistBuddy -c \"Print CFBundleVersion\" $PRODUCT_SETTINGS_PATH`\n    version=`expr $version + 1`\n    /usr/libexec/PlistBuddy -c \"Set :CFBundleVersion $version\" $PRODUCT_SETTINGS_PATH\n    #/usr/libexec/PlistBuddy -c \"Set :CFBundleShortVersionString $version\" $PRODUCT_SETTINGS_PATH 这行代码会让version也自增，一般不需要\n\n如图：\n![图1][2]\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-09-21%20%E4%B8%8B%E5%8D%883.55.49.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/09211611.png\n  \n\nOK,这样设置以后，每次编译，Build version都会自增1.","slug":"Bundle version VS Bundle versions string","published":1,"updated":"2015-10-09T01:52:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtoq00002trn19ztbqbo"},{"title":"记住回家的路","date":"2015-09-01T05:36:57.000Z","keywords":"记住回家的路","_content":"\n\n![配图][1]\n\n　　第一次读到这篇文章，是高中时做一篇语文阅读理解，一字一句读完，若有所悟。再次读，是在周国平《安静的位置》文集中。读周国平老师的文字，就好像在与一位从容淡然的智者交谈，特别是每次读到这篇文章，内心都无比沉静。在这里贴出原文，希望自己心猿意马、迷茫无助之时，有这样一口清泉洗涤我的心。\n\n <!-- more -->\n\n\n----------\n\n\n原文：\n　　生活在今日的世界上，心灵的宁静不易得到。这个世界既充满着机会，也充满着压力。机会诱惑人去尝试，压力逼迫人去奋斗，都使人静不下心来。我不主张年轻人拒绝任何机会，逃避一切压力，以闭关自守的姿态面对世界。年轻的心灵本不该静如止水，波澜不惊。世界是属于年轻人的，趁着年轻到广阔的世界上去闯荡一番，原是人生必要的经历。所须防止的只是，把自己完全交给了机会和压力去支配，在世界上风风火火或浑浑噩噩，迷失了回家的路途。\n　　每到一个陌生的城市，我的习惯是随便走走，好奇心驱使我去探寻这里的热闹的街巷和冷僻的角落。在这途中，难免暂时地迷路，但心中一定要有把握，自信能记起回住处的路线，否则便会感觉不踏实。我想，人生也是如此。你不妨在世界上闯荡，去建功立业，去探险猎奇，去觅情寻爱，可是，你一定不要忘记了回家的路。这个家，就是你的自我，你自己的心灵世界。\n　　寻求心灵的宁静，前提是首先要有一个心灵。在理论上，人人都有一个心灵，但事实上却不尽然。有一些人，他们永远被外界的力量左右着，永远生活在喧闹的外部世界里，未尝有真正的内心生活。对于这样的人，心灵的宁静就无从谈起。一个人惟有关注心灵，才会因为心灵被扰乱而不安，才会有寻求心灵的宁静之需要。所以，具有过内心生活的禀赋，或者养成这样的习惯，这是最重要的。有此禀赋或习惯的人都知道，其实内心生活与外部生活并非互相排斥的，同一个人完全可能在两方面都十分丰富。区别在于，注重内心生活的人善于把外部生活的收获变成心灵的财富，缺乏此种禀赋或习惯的人则往往会迷失在外部生活中，人整个儿是散的。自我是一个中心点，一个人有了坚实的自我，他在这个世界上便有了精神的坐标，无论走多远都能够找到回家的路。换一个比方，我们不妨说，一个有着坚实的自我的人便仿佛有了一个精神的密友，他无论走到哪里都带着这个密友，这个密友将忠实地分享他的一切遭遇，倾听他的一切心语。 \n　　如果一个人有他的心灵追求，又在世界上闯荡了一番，有了相当的人生阅历，那么，他就会逐渐认识到自己在这个世界上的位置。世界无限广阔，诱惑永无止境，然而，属于每一个人的现实可能性终究是有限的。你不妨对一切可能性保持着开放的心态，因为那是人生魅力的源泉，但同时你也要早一些在世界之海上抛下自己的锚，找到最适合自己的领域。一个人不论伟大还是平凡，只要他顺应自己的天性，找到了自己真正喜欢做的事，并且一心把自己喜欢做的事做得尽善尽美，他在这个世界上就有了牢不可破的家园。于是，他不但会有足够的勇气去承受外界的压力，而且会有足够的清醒来面对形形色色的机会或诱惑。我们当然没有理由怀疑，这样的一个人必能获得生活的充实和内心的宁静。\n\n\n  [1]: http://ww1.sinaimg.cn/large/83110eaagw1evmwwzz8q3j20bo09maa7.jpg","source":"_posts/记住回家的路.md","raw":"title: 记住回家的路\ndate: 2015-09-01 13:36:57\nkeywords: 记住回家的路\ntags: [杂谈,读书札记]\n---\n\n\n![配图][1]\n\n　　第一次读到这篇文章，是高中时做一篇语文阅读理解，一字一句读完，若有所悟。再次读，是在周国平《安静的位置》文集中。读周国平老师的文字，就好像在与一位从容淡然的智者交谈，特别是每次读到这篇文章，内心都无比沉静。在这里贴出原文，希望自己心猿意马、迷茫无助之时，有这样一口清泉洗涤我的心。\n\n <!-- more -->\n\n\n----------\n\n\n原文：\n　　生活在今日的世界上，心灵的宁静不易得到。这个世界既充满着机会，也充满着压力。机会诱惑人去尝试，压力逼迫人去奋斗，都使人静不下心来。我不主张年轻人拒绝任何机会，逃避一切压力，以闭关自守的姿态面对世界。年轻的心灵本不该静如止水，波澜不惊。世界是属于年轻人的，趁着年轻到广阔的世界上去闯荡一番，原是人生必要的经历。所须防止的只是，把自己完全交给了机会和压力去支配，在世界上风风火火或浑浑噩噩，迷失了回家的路途。\n　　每到一个陌生的城市，我的习惯是随便走走，好奇心驱使我去探寻这里的热闹的街巷和冷僻的角落。在这途中，难免暂时地迷路，但心中一定要有把握，自信能记起回住处的路线，否则便会感觉不踏实。我想，人生也是如此。你不妨在世界上闯荡，去建功立业，去探险猎奇，去觅情寻爱，可是，你一定不要忘记了回家的路。这个家，就是你的自我，你自己的心灵世界。\n　　寻求心灵的宁静，前提是首先要有一个心灵。在理论上，人人都有一个心灵，但事实上却不尽然。有一些人，他们永远被外界的力量左右着，永远生活在喧闹的外部世界里，未尝有真正的内心生活。对于这样的人，心灵的宁静就无从谈起。一个人惟有关注心灵，才会因为心灵被扰乱而不安，才会有寻求心灵的宁静之需要。所以，具有过内心生活的禀赋，或者养成这样的习惯，这是最重要的。有此禀赋或习惯的人都知道，其实内心生活与外部生活并非互相排斥的，同一个人完全可能在两方面都十分丰富。区别在于，注重内心生活的人善于把外部生活的收获变成心灵的财富，缺乏此种禀赋或习惯的人则往往会迷失在外部生活中，人整个儿是散的。自我是一个中心点，一个人有了坚实的自我，他在这个世界上便有了精神的坐标，无论走多远都能够找到回家的路。换一个比方，我们不妨说，一个有着坚实的自我的人便仿佛有了一个精神的密友，他无论走到哪里都带着这个密友，这个密友将忠实地分享他的一切遭遇，倾听他的一切心语。 \n　　如果一个人有他的心灵追求，又在世界上闯荡了一番，有了相当的人生阅历，那么，他就会逐渐认识到自己在这个世界上的位置。世界无限广阔，诱惑永无止境，然而，属于每一个人的现实可能性终究是有限的。你不妨对一切可能性保持着开放的心态，因为那是人生魅力的源泉，但同时你也要早一些在世界之海上抛下自己的锚，找到最适合自己的领域。一个人不论伟大还是平凡，只要他顺应自己的天性，找到了自己真正喜欢做的事，并且一心把自己喜欢做的事做得尽善尽美，他在这个世界上就有了牢不可破的家园。于是，他不但会有足够的勇气去承受外界的压力，而且会有足够的清醒来面对形形色色的机会或诱惑。我们当然没有理由怀疑，这样的一个人必能获得生活的充实和内心的宁静。\n\n\n  [1]: http://ww1.sinaimg.cn/large/83110eaagw1evmwwzz8q3j20bo09maa7.jpg","slug":"记住回家的路","published":1,"updated":"2015-09-23T07:47:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtr0000d2trna3tmqxv5"},{"title":"观《被嫌弃的松子的一生》有感","toc":false,"date":"2015-10-11T12:29:57.000Z","_content":"电影讲述了一位日本女性悲哀的、充满遗憾的一生。\n<!-- more -->\n\n\n青年松子是一名中学的班主任，一次年级旅行中，她用一个并不恰当的方式，解决学生的偷窃事件，却惹祸上身，被学校辞退，这意外地改变了她从此以后的人生轨迹。不，不能说是意外。从小到大，松子的父亲都对得了肺炎的妹妹久美格外疼爱，却无意中忽略了对松子的关怀。松子为了让父亲多注意她，学着舞台剧里小丑的模样拌鬼脸惹父亲发笑。当她把自己恋爱的消息说给妹妹听后，父亲当着全家人的面呵斥她，认为她没有考虑因生病而无法出门的妹妹的感受。从小到大所受到的所有委屈，就在这一次的家庭教育中喷薄而发，一起之下，松子离家出走。\n\n\n离家出走后的松子所经历的一切，包括不堪的工作经历以及屡屡在感情中遭受被抛弃的命运，我觉得，本质上是她从小因特殊的家庭环境而形成的性格有关。小时候，为了取悦父亲而扮鬼脸；作为一名教师，为了委婉地解决学生的偷窃事件，却自己偷钱还给旅馆老板；当自己的作家男友自杀后，居然因为男友对手特殊的关爱，情愿做起了人家的情人，做着取代正宫的美梦；最后和做了为小混混学生谈了一场轰轰烈烈的恋爱，因为男友是混混，她要做混混女；在最后这场感情也无疾而终之后，她选择放弃一切，不走近任何人，也不让任何人走进她的世界，如此自甘堕落下去……她从未想过，要为自己如何在这世上过活，却一味地追求只要有人陪伴就好。可能在被她爱得人看来，她做的一切是出去热爱和包容，可是，这些所谓的对别人的好，恰恰是对自己极大的不负责任。一味地依赖别人，不思考自己的人生意义的人，最后的苦果只有自己去吃。\n\n\n性格决定命运，这也是看完该片之后的感受。父母对自己所有的孩子都要公平看待，不要因为自己的过错，对孩子性格的形成造成不良影响。","source":"_posts/观《被嫌弃的松子的一生》有感.md","raw":"title: 观《被嫌弃的松子的一生》有感\ntoc: false\ndate: 2015-10-11 20:29:57\ntags: [电影,杂谈,感悟]\ncategories: 电影\n---\n电影讲述了一位日本女性悲哀的、充满遗憾的一生。\n<!-- more -->\n\n\n青年松子是一名中学的班主任，一次年级旅行中，她用一个并不恰当的方式，解决学生的偷窃事件，却惹祸上身，被学校辞退，这意外地改变了她从此以后的人生轨迹。不，不能说是意外。从小到大，松子的父亲都对得了肺炎的妹妹久美格外疼爱，却无意中忽略了对松子的关怀。松子为了让父亲多注意她，学着舞台剧里小丑的模样拌鬼脸惹父亲发笑。当她把自己恋爱的消息说给妹妹听后，父亲当着全家人的面呵斥她，认为她没有考虑因生病而无法出门的妹妹的感受。从小到大所受到的所有委屈，就在这一次的家庭教育中喷薄而发，一起之下，松子离家出走。\n\n\n离家出走后的松子所经历的一切，包括不堪的工作经历以及屡屡在感情中遭受被抛弃的命运，我觉得，本质上是她从小因特殊的家庭环境而形成的性格有关。小时候，为了取悦父亲而扮鬼脸；作为一名教师，为了委婉地解决学生的偷窃事件，却自己偷钱还给旅馆老板；当自己的作家男友自杀后，居然因为男友对手特殊的关爱，情愿做起了人家的情人，做着取代正宫的美梦；最后和做了为小混混学生谈了一场轰轰烈烈的恋爱，因为男友是混混，她要做混混女；在最后这场感情也无疾而终之后，她选择放弃一切，不走近任何人，也不让任何人走进她的世界，如此自甘堕落下去……她从未想过，要为自己如何在这世上过活，却一味地追求只要有人陪伴就好。可能在被她爱得人看来，她做的一切是出去热爱和包容，可是，这些所谓的对别人的好，恰恰是对自己极大的不负责任。一味地依赖别人，不思考自己的人生意义的人，最后的苦果只有自己去吃。\n\n\n性格决定命运，这也是看完该片之后的感受。父母对自己所有的孩子都要公平看待，不要因为自己的过错，对孩子性格的形成造成不良影响。","slug":"观《被嫌弃的松子的一生》有感","published":1,"updated":"2015-10-14T07:56:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtr4000i2trnzbnrxnsp"},{"title":"花绘一二幅","date":"2015-09-05T13:49:34.000Z","_content":"\n中午画了一幅水彩画：芍药花。\n![芍药花](https://ooo.0o0.ooo/2015/09/05/55eaf9c27a893.png)\n\n<!-- more -->\n\n\n这是学习水彩花绘的第二幅作品。\n\n\n第一幅是这样的：\n![绣球](https://ooo.0o0.ooo/2015/09/05/55eafae540414.png)\n\n对比一下，发现还是有点进步的。","source":"_posts/花绘一二幅.markdown","raw":"title: 花绘一二幅\ndate: 2015-09-05 21:49:34\ntags: [水彩,爱好,生活]\n---\n\n中午画了一幅水彩画：芍药花。\n![芍药花](https://ooo.0o0.ooo/2015/09/05/55eaf9c27a893.png)\n\n<!-- more -->\n\n\n这是学习水彩花绘的第二幅作品。\n\n\n第一幅是这样的：\n![绣球](https://ooo.0o0.ooo/2015/09/05/55eafae540414.png)\n\n对比一下，发现还是有点进步的。","slug":"花绘一二幅","published":1,"updated":"2015-09-23T07:46:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtr8000q2trnrkgm9het"},{"title":"良好的编程习惯","date":"2015-09-15T03:50:52.000Z","_content":"\n> 习惯，是积久养成的生活方式，它能够使人们使用最少的精力，达成既定的某种结果。好的习惯，让我们不用花费太多精力在为什么这么做的思考上面，因为在养成这种好习惯的过程中，我们已经思考了原因，也明白这么做的好处，剩下的，照着做就是了。编程也需要良好的习惯，培养良好的编程习惯，让我们工作地更加高效。\n<!-- more -->\n\n![良好的编程习惯](http://7xlt6k.com1.z0.glb.clouddn.com/%E8%89%AF%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF.png)\n","source":"_posts/良好的编程习惯.md","raw":"title: 良好的编程习惯\ndate: 2015-09-15 11:50:52\ntags: [程序人生,编程习惯]\n---\n\n> 习惯，是积久养成的生活方式，它能够使人们使用最少的精力，达成既定的某种结果。好的习惯，让我们不用花费太多精力在为什么这么做的思考上面，因为在养成这种好习惯的过程中，我们已经思考了原因，也明白这么做的好处，剩下的，照着做就是了。编程也需要良好的习惯，培养良好的编程习惯，让我们工作地更加高效。\n<!-- more -->\n\n![良好的编程习惯](http://7xlt6k.com1.z0.glb.clouddn.com/%E8%89%AF%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF.png)\n","slug":"良好的编程习惯","published":1,"updated":"2015-09-23T07:47:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtrc000x2trniaaztzhf"},{"title":"胡言乱语","date":"2015-09-01T05:20:55.000Z","_content":"\n我敲击着键盘\n在代码之间游弋\n那不是我的向往\n如道具一般的工作\n开发着别人眼中的生活\n\n<!-- more -->\n\n我不是勤恳的工人\n无私奉献毛孔中的火热\n不能与金钱为敌\n只希望梦想不会进入坟地\n\n我拿起画笔信手涂鸦\n多数只是以失望收场\n耐心是我的敌人\n激情和创意是我的短板\n\n我试着在镜头里写情书\n不管是甘甜还是苦涩\n花草，虫鱼，枯枝，残影\n都成了落寞的情话\n\n我唱起红尘的歌\n忘我地演绎着悲伤的快乐\n怕是歌词太应景\n预言里有一个可笑的侬\n\n\n剩下的我\n用捡来的文字堆砌所谓的诗歌\n这是我虚伪的满足\n打发物质追求之外的空虚\n用胡言乱语，装饰自己的清高和粗俗","source":"_posts/胡言乱语.markdown","raw":"title: 胡言乱语\ndate: 2015-09-01 13:20:55\ntags: [诗,随笔,杂谈]\n---\n\n我敲击着键盘\n在代码之间游弋\n那不是我的向往\n如道具一般的工作\n开发着别人眼中的生活\n\n<!-- more -->\n\n我不是勤恳的工人\n无私奉献毛孔中的火热\n不能与金钱为敌\n只希望梦想不会进入坟地\n\n我拿起画笔信手涂鸦\n多数只是以失望收场\n耐心是我的敌人\n激情和创意是我的短板\n\n我试着在镜头里写情书\n不管是甘甜还是苦涩\n花草，虫鱼，枯枝，残影\n都成了落寞的情话\n\n我唱起红尘的歌\n忘我地演绎着悲伤的快乐\n怕是歌词太应景\n预言里有一个可笑的侬\n\n\n剩下的我\n用捡来的文字堆砌所谓的诗歌\n这是我虚伪的满足\n打发物质追求之外的空虚\n用胡言乱语，装饰自己的清高和粗俗","slug":"胡言乱语","published":1,"updated":"2015-09-23T07:45:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtrh00122trn8s3pz60p"},{"title":"纪·彩虹蛋糕","date":"2015-09-20T12:23:39.000Z","_content":"![蛋糕先生的彩虹蛋糕][1]\n\n\n蛋糕先生昨天起了个大早，赶早班车来苏州。他提前在网上订了蛋糕，中午十二点之前送到。因为单位周日开会，他只能陪我短暂的几个小时，这是见到他之后他才说的，不然怎么都不会让他来的。蛋糕打开的一瞬间，我像个小孩子一样兴奋得差点跳了起来，是彩虹蛋糕，五彩缤纷，很可爱！我在一旁又是小心舔舐着奶油，又是拿着手机拍照，他则羞涩地说比想象中的小了。很感动，但是更多是心疼，这么折腾地来回跑着，就为了在我放假回家去提前一起过个生日。\n\n\n认识这么多年了，还是第一次一起吃生日蛋糕。特别是他开始为我切蛋糕的时刻，瞬间觉得外面的世界再怎么纷乱，有这么一个人，惦念着你，和你一起分享幸福，这就够了。\n\n\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/IMG_4291-1.JPG","source":"_posts/纪·彩虹蛋糕.md","raw":"title: 纪·彩虹蛋糕\ndate: 2015-09-20 20:23:39\ntags: [生活,生日,爱]\n---\n![蛋糕先生的彩虹蛋糕][1]\n\n\n蛋糕先生昨天起了个大早，赶早班车来苏州。他提前在网上订了蛋糕，中午十二点之前送到。因为单位周日开会，他只能陪我短暂的几个小时，这是见到他之后他才说的，不然怎么都不会让他来的。蛋糕打开的一瞬间，我像个小孩子一样兴奋得差点跳了起来，是彩虹蛋糕，五彩缤纷，很可爱！我在一旁又是小心舔舐着奶油，又是拿着手机拍照，他则羞涩地说比想象中的小了。很感动，但是更多是心疼，这么折腾地来回跑着，就为了在我放假回家去提前一起过个生日。\n\n\n认识这么多年了，还是第一次一起吃生日蛋糕。特别是他开始为我切蛋糕的时刻，瞬间觉得外面的世界再怎么纷乱，有这么一个人，惦念着你，和你一起分享幸福，这就够了。\n\n\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/IMG_4291-1.JPG","slug":"纪·彩虹蛋糕","published":1,"updated":"2015-10-09T02:42:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtrl00182trnxmrm6upg"},{"title":"浅析UITableViewCell重用机制","toc":true,"date":"2015-10-28T02:31:02.000Z","_content":"UITableView在iOS开发中用的非常的多，由于Cell中一般都会有Image等占用内存的资源，容易引起Memory Warning，所以iOS引入了重用机制。那么今天就对UITableView的重用机制分析一下。\n\n<!-- more -->\n\n# 案例分析\n\n## 情况A：所有Cell具有相同的类型\n\n    -(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n    {\n        static NSInteger times = 0;\n        static NSString *cellIdentifier = @\"Default Type\";\n        UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n        if (myCell == nil) {\n            myCell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n            NSLog(@\"创建%d次\",++times);\n        }\n        myCell.textLabel.text= [NSString stringWithFormat:@\"第%d行 %@\",indexPath.row+1, cellIdentifier];\n        return myCell;\n    }\n    \n分析：\n\n- 有两个存放Cell的队列：可复用Cell队列 **reusableCellQueue** 和可见的Cell队列 **visualCellQueue**；\n- 执行`cellForRowAtIndexPath`之前，先从reusableCellQueue中寻找标识为`Default Style`的Cell，如果没有，返回`nil`，接着会执行`initWithStyle：reuseIdentifier`；\n- 假设屏幕显示 **11行** Cell，如果不滚动TableView，reusableCellQueue是空的，Cell被创建了11次；\n- 向上拖动TableView，使第12行Cell出现在屏幕中（加入到visualCellQueue中），这时，reusableCellQueue仍然是空的。所以又创建了一次Cell；\n- 当第12行Cell完全出现在visualCellQueue中，第1行Cell就加入到了reusableCellQueue中。\n- 再次向上拖动TableView，使第13行Cell出现。注意，这时从reusableCellQueue中寻找到了标识为`Default Style`的Cell，于是第一行Cell被复用，不用重新创建Cell。\n- 以后再上下滑动，都会在reusableCellQueue中找到可复用的Cell，因此，此TableView完成完整的滚动需要创建 **12次** Cell。\n- 总结：第一页显示N行Cell，则一共创建了N+1次。\n    \n## 情况B：具有多种类型的Cell\n\n        -(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n    {\n        NSString *cellIdentifier;\n        UITableViewCellStyle cellStyle;\n        switch ((indexPath.row + 1)%4) {\n            case 1:{\n                //有标题和副标题，可选图片\n                cellIdentifier = @\"Subtitle Style\";\n                cellStyle = UITableViewCellStyleSubtitle;\n            }\n                break;\n            case 2:{\n                //左边文字左对齐，右边文字右对齐，可选的图片\n                cellIdentifier = @\"Value1 Style\";\n                cellStyle = UITableViewCellStyleValue1;\n            }\n                break;\n            case 3:{\n                //左边文字右对齐，蓝色字体。右边文字左对齐，黑色。没有图片\n                cellIdentifier = @\"Value2 Style\";\n                cellStyle = UITableViewCellStyleValue2;\n            }\n                break;\n            default:{\n                //有标题，没有副标题，可选的图片\n                cellIdentifier = @\"Default Style\";\n                cellStyle = UITableViewCellStyleDefault;\n            }\n                break;\n        }\n    \n        static NSInteger times = 0;\n        UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n        if (!myCell) {\n            myCell = [[UITableViewCell alloc] initWithStyle:cellStyle reuseIdentifier:cellIdentifier];\n            NSLog(@\"创建%d次\",++times);\n        }\n        myCell.textLabel.text = [NSString stringWithFormat:@\"第%d行%@\",indexPath.row+1, cellIdentifier];\n        myCell.detailTextLabel.text = @\"Subtitle Text\";\n        if (indexPath.row > 3) {\n            myCell.imageView.image = [UIImage imageNamed:@\"smile.png\"];\n        }\n        return myCell;\n    }\n    \n    \n运行结果是这样的：\n    ![不同ReusableCellIdentifier的Cell][1]\n\n### 分析：\n\n-  第一页显示11个Cell，创建了11次。\n-  向上拖动TableView，使第12行Cell出现，第12行是`Default Style`类型的，可复用队列为空，没有找到可复用Cell，于是又创建一次（第12次）。第一个Cell进入reusableCellQueue中。此时reusableCellQueue中只有一个`Subtitle Style`的Cell。\n-  再次向上拖动，当第13个Cell出现时，从reusableCellQueue中寻找标识为`Subtitle Style`的Cell，Yes，reusableCellQueue里有这个标识的Cell，于是复用队列里的这个Cell。此时第二个Cell进入reusableCellQueue，队列里有这几个标识：`Subtitle Style`和`Value1 Style`。\n-  当第14个Cell出现时，寻找标识为`Value1 Style`的Cell，也找到了，复用之。此时队列里有`Subtitle Style`、`Value1 Style`和`Value2 Style`\n-  以此类推，以后的Cell都可以在reusableCellQueue中找到可复用的Cell。因此一共创建了12次Cell。\n\n### 不该有图片的Cell出现了图片\n当上下滑动TableView的时候，会出现第一行的Cell一会有图片，一会儿又没有图片的现象。这是为什么呢？\n\n\n第一个Cell应该是没有图片的，但是在TableView向下滚动，使第一个Cell出现在屏幕上的时候，会先从reusableCellQueue中寻找标识为`Subtitle Style`的Cell。注意了，第5、9、13、17行的Cell都是Subtitle Style类型的，而且还都带有图片，因此，当这些类型的Cell在reusableCellQueue中被寻找到时，第一行Cell上就会出现图片。\n\n\n那么，如何解决这类问题呢？\n\n\n在配置Cell的时候一定要注意，对取出的重用的cell要重新赋值，不能遗留被重用Cell的数据。\n\n    \n\n# 区分两个获取重用Cell的方法\n\n## - dequeueReusableCellWithIdentifier:forIndexPath:\n此方法返回一个相关标识的UITableViewCell对象，这个Cell总是有效的(不是nil)。\n\n** 注意：**\n使用这个方法之前，必须使用`registerNib:forCellReuseIdentifier:`或者`registerClass:forCellReuseIdentifier:`注册一个Cell类或者nib。\n\n\n    [tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:cellIdentifier];\n        UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier forIndexPath:indexPath];\n\n## - dequeueReusableCellWithIdentifier:\n   返回值 : 相关标识的UITableViewCell对象，或者是nil(如果在可重用Cell队列中没有找到的话)。\n   \n       UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n    if (myCell == nil) {\n        myCell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n    }\n## 比较\n    使用`- dequeueReusableCellWithIdentifier:forIndexPath:`的话，必须注册Cell，而且，不需要再判断Cell是否为nil和创建 Cell。\n    \n    \n\n\n\n    \n    \n    \n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/Simulator%20Screen%20Shot%202015%E5%B9%B410%E6%9C%8828%E6%97%A5%20%E4%B8%8B%E5%8D%881.41.28.png","source":"_posts/浅析UITableViewCell重用机制.md","raw":"title: 浅析UITableViewCell重用机制\ntoc: true\ndate: 2015-10-28 10:31:02\ntags: [iOS, UITableView, 知识小集]\ncategories: [iOS]\n---\nUITableView在iOS开发中用的非常的多，由于Cell中一般都会有Image等占用内存的资源，容易引起Memory Warning，所以iOS引入了重用机制。那么今天就对UITableView的重用机制分析一下。\n\n<!-- more -->\n\n# 案例分析\n\n## 情况A：所有Cell具有相同的类型\n\n    -(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n    {\n        static NSInteger times = 0;\n        static NSString *cellIdentifier = @\"Default Type\";\n        UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n        if (myCell == nil) {\n            myCell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n            NSLog(@\"创建%d次\",++times);\n        }\n        myCell.textLabel.text= [NSString stringWithFormat:@\"第%d行 %@\",indexPath.row+1, cellIdentifier];\n        return myCell;\n    }\n    \n分析：\n\n- 有两个存放Cell的队列：可复用Cell队列 **reusableCellQueue** 和可见的Cell队列 **visualCellQueue**；\n- 执行`cellForRowAtIndexPath`之前，先从reusableCellQueue中寻找标识为`Default Style`的Cell，如果没有，返回`nil`，接着会执行`initWithStyle：reuseIdentifier`；\n- 假设屏幕显示 **11行** Cell，如果不滚动TableView，reusableCellQueue是空的，Cell被创建了11次；\n- 向上拖动TableView，使第12行Cell出现在屏幕中（加入到visualCellQueue中），这时，reusableCellQueue仍然是空的。所以又创建了一次Cell；\n- 当第12行Cell完全出现在visualCellQueue中，第1行Cell就加入到了reusableCellQueue中。\n- 再次向上拖动TableView，使第13行Cell出现。注意，这时从reusableCellQueue中寻找到了标识为`Default Style`的Cell，于是第一行Cell被复用，不用重新创建Cell。\n- 以后再上下滑动，都会在reusableCellQueue中找到可复用的Cell，因此，此TableView完成完整的滚动需要创建 **12次** Cell。\n- 总结：第一页显示N行Cell，则一共创建了N+1次。\n    \n## 情况B：具有多种类型的Cell\n\n        -(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n    {\n        NSString *cellIdentifier;\n        UITableViewCellStyle cellStyle;\n        switch ((indexPath.row + 1)%4) {\n            case 1:{\n                //有标题和副标题，可选图片\n                cellIdentifier = @\"Subtitle Style\";\n                cellStyle = UITableViewCellStyleSubtitle;\n            }\n                break;\n            case 2:{\n                //左边文字左对齐，右边文字右对齐，可选的图片\n                cellIdentifier = @\"Value1 Style\";\n                cellStyle = UITableViewCellStyleValue1;\n            }\n                break;\n            case 3:{\n                //左边文字右对齐，蓝色字体。右边文字左对齐，黑色。没有图片\n                cellIdentifier = @\"Value2 Style\";\n                cellStyle = UITableViewCellStyleValue2;\n            }\n                break;\n            default:{\n                //有标题，没有副标题，可选的图片\n                cellIdentifier = @\"Default Style\";\n                cellStyle = UITableViewCellStyleDefault;\n            }\n                break;\n        }\n    \n        static NSInteger times = 0;\n        UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n        if (!myCell) {\n            myCell = [[UITableViewCell alloc] initWithStyle:cellStyle reuseIdentifier:cellIdentifier];\n            NSLog(@\"创建%d次\",++times);\n        }\n        myCell.textLabel.text = [NSString stringWithFormat:@\"第%d行%@\",indexPath.row+1, cellIdentifier];\n        myCell.detailTextLabel.text = @\"Subtitle Text\";\n        if (indexPath.row > 3) {\n            myCell.imageView.image = [UIImage imageNamed:@\"smile.png\"];\n        }\n        return myCell;\n    }\n    \n    \n运行结果是这样的：\n    ![不同ReusableCellIdentifier的Cell][1]\n\n### 分析：\n\n-  第一页显示11个Cell，创建了11次。\n-  向上拖动TableView，使第12行Cell出现，第12行是`Default Style`类型的，可复用队列为空，没有找到可复用Cell，于是又创建一次（第12次）。第一个Cell进入reusableCellQueue中。此时reusableCellQueue中只有一个`Subtitle Style`的Cell。\n-  再次向上拖动，当第13个Cell出现时，从reusableCellQueue中寻找标识为`Subtitle Style`的Cell，Yes，reusableCellQueue里有这个标识的Cell，于是复用队列里的这个Cell。此时第二个Cell进入reusableCellQueue，队列里有这几个标识：`Subtitle Style`和`Value1 Style`。\n-  当第14个Cell出现时，寻找标识为`Value1 Style`的Cell，也找到了，复用之。此时队列里有`Subtitle Style`、`Value1 Style`和`Value2 Style`\n-  以此类推，以后的Cell都可以在reusableCellQueue中找到可复用的Cell。因此一共创建了12次Cell。\n\n### 不该有图片的Cell出现了图片\n当上下滑动TableView的时候，会出现第一行的Cell一会有图片，一会儿又没有图片的现象。这是为什么呢？\n\n\n第一个Cell应该是没有图片的，但是在TableView向下滚动，使第一个Cell出现在屏幕上的时候，会先从reusableCellQueue中寻找标识为`Subtitle Style`的Cell。注意了，第5、9、13、17行的Cell都是Subtitle Style类型的，而且还都带有图片，因此，当这些类型的Cell在reusableCellQueue中被寻找到时，第一行Cell上就会出现图片。\n\n\n那么，如何解决这类问题呢？\n\n\n在配置Cell的时候一定要注意，对取出的重用的cell要重新赋值，不能遗留被重用Cell的数据。\n\n    \n\n# 区分两个获取重用Cell的方法\n\n## - dequeueReusableCellWithIdentifier:forIndexPath:\n此方法返回一个相关标识的UITableViewCell对象，这个Cell总是有效的(不是nil)。\n\n** 注意：**\n使用这个方法之前，必须使用`registerNib:forCellReuseIdentifier:`或者`registerClass:forCellReuseIdentifier:`注册一个Cell类或者nib。\n\n\n    [tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:cellIdentifier];\n        UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier forIndexPath:indexPath];\n\n## - dequeueReusableCellWithIdentifier:\n   返回值 : 相关标识的UITableViewCell对象，或者是nil(如果在可重用Cell队列中没有找到的话)。\n   \n       UITableViewCell *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n    if (myCell == nil) {\n        myCell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n    }\n## 比较\n    使用`- dequeueReusableCellWithIdentifier:forIndexPath:`的话，必须注册Cell，而且，不需要再判断Cell是否为nil和创建 Cell。\n    \n    \n\n\n\n    \n    \n    \n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/Simulator%20Screen%20Shot%202015%E5%B9%B410%E6%9C%8828%E6%97%A5%20%E4%B8%8B%E5%8D%881.41.28.png","slug":"浅析UITableViewCell重用机制","published":1,"updated":"2015-10-30T03:17:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtru001e2trn6rr8uy7e"},{"title":"新的开篇","date":"2015-09-01T05:10:13.000Z","_content":"\n\n\n今天是2015年9月1日，是学生们开学的日子。我也在今天正式开启了我的Hexo个人主页。\n<!-- more -->\n\n## 功夫不负有心人\n\n\n老早就想拥有一个属于自己的个人主页，尽管在LOFTER、网易博客、CSDN、开源中国、简书等平台都曾经注册过账号,但是总感觉杂而乱，每次登陆哪些平台，总能被其他用户的内容所吸引，而并不能集中精力在自己的事情上。\n\n\n于是乎，趁着八月份工作清闲，我尝试着学习使用Hexo+GitHub搭建自己的个人主页。经过两个多星期的摸索，终于在上周搭建好了。\n\n\n## 路漫漫其修远兮，吾将上下而求索\n\n\n说实话，虽然上周就把博客搭建好了，但是一直没有在上面写东西。主要是没有花心思去学Markdown语法。今天呢，决定正式开始这个博客的写作之旅。\n\n关于为什么用Markdown写作，[看这里](http://wlog.cn/soft/why-use-markdown.html)。\n我选择下载安装[Cmd Markdown编辑软件](https://www.zybuluo.com/cmd/)来编辑文本。\n\nOK，既然选择了这样一条折腾的道路，就继续折腾下去吧。\n\n\n\n\n","source":"_posts/新的开篇.markdown","raw":"title: 新的开篇\ndate: 2015-09-01 13:10:13\ntags: 杂谈\n---\n\n\n\n今天是2015年9月1日，是学生们开学的日子。我也在今天正式开启了我的Hexo个人主页。\n<!-- more -->\n\n## 功夫不负有心人\n\n\n老早就想拥有一个属于自己的个人主页，尽管在LOFTER、网易博客、CSDN、开源中国、简书等平台都曾经注册过账号,但是总感觉杂而乱，每次登陆哪些平台，总能被其他用户的内容所吸引，而并不能集中精力在自己的事情上。\n\n\n于是乎，趁着八月份工作清闲，我尝试着学习使用Hexo+GitHub搭建自己的个人主页。经过两个多星期的摸索，终于在上周搭建好了。\n\n\n## 路漫漫其修远兮，吾将上下而求索\n\n\n说实话，虽然上周就把博客搭建好了，但是一直没有在上面写东西。主要是没有花心思去学Markdown语法。今天呢，决定正式开始这个博客的写作之旅。\n\n关于为什么用Markdown写作，[看这里](http://wlog.cn/soft/why-use-markdown.html)。\n我选择下载安装[Cmd Markdown编辑软件](https://www.zybuluo.com/cmd/)来编辑文本。\n\nOK，既然选择了这样一条折腾的道路，就继续折腾下去吧。\n\n\n\n\n","slug":"新的开篇","published":1,"updated":"2015-09-23T07:48:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtry001k2trnsz9cejld"},{"title":"写在与家人视频之后","date":"2015-09-09T15:54:39.000Z","_content":"\n\n今天晚上跟家里人视频聊天，看到爸爸妈妈日渐衰老的脸庞，突然觉得自己很不孝，没能够时刻陪在他们身边孝敬他们。<!-- more -->\n爸妈一提起我，总是一脸的骄傲，也从不指望我能为他们付出多少，只要我能吃饱穿暖，工作顺顺利利，开开心心就好。作为他们的女儿，我一直以来都按照自己的想法安排自己的生活，来苏州实训是我的决定，留在这里上班也是我的决定，他们从来都是尊重我，支持我的。可是就在今天，看到他们老去得脸庞，心酸的厉害，挂断视频眼泪就流了出来。\n爸妈已经五十有五，这个年岁的人，大多已经开始享受儿孙之福。而我的父母，一双儿女刚踏进社会，等到我和弟弟成家立业，他们也都六十左右了。我们努力的速度，永远跟不上父母老去的速度。还能怎么样呢？作为我们这种普通家庭出来的孩子，为了实现自身价值，唯有各种摸索，更加努力，因为我们除了父母的爱，无所依靠。我们要学会适应环境，更要学会在当前的环境中探索一条出路。\n一个人二十到三十岁之间是学习和探索的过程，二十到二十四岁在大学里学习专业技能，二十四到二十六七，这三年时间在社会上摸爬滚打，找寻社会定位。我现在就处于这样的时期。如今自己已然二十五岁，参加工作快一年半，期间心无定数，实在浪费了不少宝贵时间。如今是时候告别稚气，踏踏实实在工作上做出点成绩了，不然，愧对远在家乡的父母，更愧对自己这颗不甘的心！","source":"_posts/写在与家人视频之后.md","raw":"title: 写在与家人视频之后\ndate: 2015-09-09 23:54:39\ntags: 生活\n---\n\n\n今天晚上跟家里人视频聊天，看到爸爸妈妈日渐衰老的脸庞，突然觉得自己很不孝，没能够时刻陪在他们身边孝敬他们。<!-- more -->\n爸妈一提起我，总是一脸的骄傲，也从不指望我能为他们付出多少，只要我能吃饱穿暖，工作顺顺利利，开开心心就好。作为他们的女儿，我一直以来都按照自己的想法安排自己的生活，来苏州实训是我的决定，留在这里上班也是我的决定，他们从来都是尊重我，支持我的。可是就在今天，看到他们老去得脸庞，心酸的厉害，挂断视频眼泪就流了出来。\n爸妈已经五十有五，这个年岁的人，大多已经开始享受儿孙之福。而我的父母，一双儿女刚踏进社会，等到我和弟弟成家立业，他们也都六十左右了。我们努力的速度，永远跟不上父母老去的速度。还能怎么样呢？作为我们这种普通家庭出来的孩子，为了实现自身价值，唯有各种摸索，更加努力，因为我们除了父母的爱，无所依靠。我们要学会适应环境，更要学会在当前的环境中探索一条出路。\n一个人二十到三十岁之间是学习和探索的过程，二十到二十四岁在大学里学习专业技能，二十四到二十六七，这三年时间在社会上摸爬滚打，找寻社会定位。我现在就处于这样的时期。如今自己已然二十五岁，参加工作快一年半，期间心无定数，实在浪费了不少宝贵时间。如今是时候告别稚气，踏踏实实在工作上做出点成绩了，不然，愧对远在家乡的父母，更愧对自己这颗不甘的心！","slug":"写在与家人视频之后","published":1,"updated":"2015-09-23T07:47:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrts0001m2trn25deus9e"},{"title":"使用网络代理造成Archive submission failed with errors","toc":false,"date":"2015-10-09T02:02:47.000Z","_content":"提交archive到AppStore，出现这个错误：\n![截图][1]\n<!-- more -->\n\n从中可以看出是网络原因导致的，我使用了鱼摆摆网络代理，所以有可能是因为使用了鱼摆摆。\n\n\n那么如何解决呢？\n\n\n首先，打开鱼摆摆的设置，点击“高级”，查看是否勾选了代理所有网站，如果勾选了，取消掉。\n![截图][2]\n\n\n然后，取消启用系统代理（不选第一行的“启用系统代理”）。\n![截图][3]\n\n\n做完上述的设置后，重新提交archive，成功。\n![此处输入图片的描述][4]\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.11.31.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.25.40.png\n  [3]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.25.27.jpg\n  [4]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.25.21.png","source":"_posts/使用网络代理造成Archive submission failed with errors.md","raw":"title: 使用网络代理造成Archive submission failed with errors\ntoc: false\ndate: 2015-10-09 10:02:47\ntags: [iOS,Archive Submission, 知识小集]\ncategories: iOS\n---\n提交archive到AppStore，出现这个错误：\n![截图][1]\n<!-- more -->\n\n从中可以看出是网络原因导致的，我使用了鱼摆摆网络代理，所以有可能是因为使用了鱼摆摆。\n\n\n那么如何解决呢？\n\n\n首先，打开鱼摆摆的设置，点击“高级”，查看是否勾选了代理所有网站，如果勾选了，取消掉。\n![截图][2]\n\n\n然后，取消启用系统代理（不选第一行的“启用系统代理”）。\n![截图][3]\n\n\n做完上述的设置后，重新提交archive，成功。\n![此处输入图片的描述][4]\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.11.31.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.25.40.png\n  [3]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.25.27.jpg\n  [4]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-09%20%E4%B8%8A%E5%8D%889.25.21.png","slug":"使用网络代理造成Archive submission failed with errors","published":1,"updated":"2015-10-09T02:30:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrts3001o2trnieugq9ei"},{"title":"以此纪念2015年最后一个长假的结束","toc":false,"date":"2015-10-08T03:04:13.000Z","_content":"\n2015年的最后一个长假终于还是结束了。这个旷日持久的假期横跨中秋和国庆，从9月24日持续到10月7日，总共十四天之久。为了拼这个假期，请了2.5天的年假和2.5天的事假。至于为什么是2.5天年假，而不是5天，那是因为今年休的是2014年的年假，而我是2014年7月份才开始转正的。不过想想春节的时候还是可以休5天年假，以此来拼凑十二天的长假，还是无比欣慰：）。\n\n<!-- more -->\n\n![白河之畔][1]\n\n\n每个假期都好像是一个空白的画布，放假之前总会在脑海中构思着画一幅多么精彩的图画，图画上有绚丽的色彩和动人的故事情节；而假期刚刚开始，仿佛有一种莫名的力量，总会阻碍你按照预期的想法绘画，于是乎，画布上布满了随心所欲的涂鸦。假期过后，再去看这副假期涂鸦作品，竟然也被它明快的色彩和稍有遗憾的情节所感动。\n\n\n![白河之畔][2]\n\n\n这个假期，在家里过了二十五岁生日，过了中秋节，当然还有国庆节。爸妈还是放任我每天睡到自然醒，当然，如果当天有什么出门的安排的话，还是会叫叫我的。在家里不出去的话，也就是一家人吃吃饭，看看电视，和老妈一起睡午觉，如果午觉我睡着了，那肯定是一觉睡到了下午五六点，癔症一会儿又该吃完饭了：）。跟弟弟在家里在网上看了《大圣归来》，但我有点看不下去，实在觉得国产动画给人提不上劲的感觉：情节拖沓、动画不华丽，好在他放假后我们在奥斯卡影城看的《小黄人大眼萌》很精彩，其实本来要看《夏洛特烦恼》的，可以那天的场次时间不满意。本打算全家一起出去游玩，爸爸提出的建议有丹江口水库、鸭河水库、社旗山陕会馆，可惜因为种种琐事，最终没有成行。遗憾是有一些的，不过平平淡淡的生活才是最幸福的。\n\n\n![追风筝的人][3]\n回家后把《追风筝的人》这本书剩下的内容看完了。“为你，千千万万遍”是哈桑对阿米尔说过得话，也是阿米尔在找到哈桑的儿子后对他说过的话，出现过三次，三次出现的含义不同：为了你我可以追千千万万遍的风筝；也可以为你做所有的事情千千万万遍；可以千千万万遍的保护你，没有终止的那天。这么一个简单的句子，蕴含着绵延不尽的深情。本想写一篇读后感，可惜文笔不佳。豆瓣读书上这篇文章写的不错，其中的一些感悟是我深有体会却无法极力描述的。另外，这本书也被拍成了电影，豆瓣评分8.2，找个时间看看。\n\n\n----------\n原文如下：\n\n　　大凡是有深刻情感经历的人，对这句话都会有一定的敏感度。因为这句话里蕴涵着说者对听者饱满而充溢得几乎止不住外泄的深情。当我们一字一顿地默念这七个字时，“为、你、千、千、万、万、遍”，便仿佛身边所有的喧哗和嘈杂都在瞬间飞弛而去，它们乘上呼啸的列车，在生命的布景墙上渐渐淡开，没有愤懑、抱怨，也没有偏见、猜测、评判。我们所看见的，就是七朵静静的野蔷薇。\n\n\n　　你可以想象这是一段铭心刻骨的恋情，一方为着另一方千万次地奔波、努力、思念；也可以想象这是一种无法割舍的亲情，疲惫地伫立在火车站台上等候的母亲，千万次地祈祷、盼望、付出；当然，你还可以想象成一段生命里的友谊和默契……但这个故事却超离了这所有的想象之外，它很离奇地诉说着一个原本为兄弟血缘却在充满战火、信仰危机、种族争端的中东背景之下被人为隐瞒成主仆关系的两个不知情的孩子以及它们长大后的故事。这个故事情节跌荡起伏，然而，当我看到地位卑微而备受凌辱的哈桑执著地对阿米尔说出这七个字时，我确实忘却了弥漫在整部小说里的背叛、欺骗和救赎，于是，在我合上这本书以后，脑海里留下的是一片响着清脆笑声的小树林，它离这个世界很远。\n\n\n　　我以为，再黑暗的人性里总会有一道烛光。而正是这道烛光，就足以点亮灰冥无火的世界。这样看来，再悲剧的人物情节也会有过温暖的笑脸。 \n\n\n　　我们往往被迫诞生在一场既定的牌局里，在这场牌局之内，有固定的生活经历和人际关系网，这是幼稚的孩童无法认知和篡改的。因为他们清澈的双眼不认得声誉、金钱作祟的闹剧，也同样不认得人情的冷漠和悲凉。在责任的推脱下，每个人都活在不同的牌理之中。所以孩子是该得到原谅的，因为你完全不忍心鞭笞一个当时内心只是单纯地不理解甚至是憎恨父亲对仆人哈桑情感上的倾斜，只是想通过风筝大赛而获得十足的父爱而背叛哈桑的缺爱的富家小少爷阿米尔。孩子不会故意犯错，孩子的错都是大人的错。\n\n\n　　于是哈桑说：“为你，千千万万遍。”他的忠实和真诚就这样随着简单的语气荡漾开来……我想，罪赎和原谅确是很好地均衡了这个世界。三毛在《这种家庭生活》里写过一句话我到现在还记忆尤深：“爱是恒久忍耐而又有恩慈。”恒久，在时间的外衣下坚守着感情的从一而终；忍耐，弱化自身的个性尊严以学会包容；恩慈，普度陷入崖底的人心。在毫无文化水平的哈桑的内心中，贮存着的善良和怜悯之心会令很多人质疑学术争吵的意义。这样，再强势的文化也会在孩子的目光前低下高傲的头颅，因为那是人类原始的皈依和追述。\n\n\n　　为你，只为你。 \n    \n\n　　千千万万遍，哪怕千千万万遍。 \n    \n\n　　如果是你，你敢不敢说，又敢不敢用尽全力地说。\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/IMG_4521.JPG\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/IMG_4517.JPG\n  [3]: http://7xlt6k.com1.z0.glb.clouddn.com/813820553279.jpg","source":"_posts/以此纪念2015年最后一个长假的结束.md","raw":"title: 以此纪念2015年最后一个长假的结束\ntoc: false\ndate: 2015-10-08 11:04:13\ntags: [生活,随笔,总结,假期]\ncategories: 生活\n\n---\n\n2015年的最后一个长假终于还是结束了。这个旷日持久的假期横跨中秋和国庆，从9月24日持续到10月7日，总共十四天之久。为了拼这个假期，请了2.5天的年假和2.5天的事假。至于为什么是2.5天年假，而不是5天，那是因为今年休的是2014年的年假，而我是2014年7月份才开始转正的。不过想想春节的时候还是可以休5天年假，以此来拼凑十二天的长假，还是无比欣慰：）。\n\n<!-- more -->\n\n![白河之畔][1]\n\n\n每个假期都好像是一个空白的画布，放假之前总会在脑海中构思着画一幅多么精彩的图画，图画上有绚丽的色彩和动人的故事情节；而假期刚刚开始，仿佛有一种莫名的力量，总会阻碍你按照预期的想法绘画，于是乎，画布上布满了随心所欲的涂鸦。假期过后，再去看这副假期涂鸦作品，竟然也被它明快的色彩和稍有遗憾的情节所感动。\n\n\n![白河之畔][2]\n\n\n这个假期，在家里过了二十五岁生日，过了中秋节，当然还有国庆节。爸妈还是放任我每天睡到自然醒，当然，如果当天有什么出门的安排的话，还是会叫叫我的。在家里不出去的话，也就是一家人吃吃饭，看看电视，和老妈一起睡午觉，如果午觉我睡着了，那肯定是一觉睡到了下午五六点，癔症一会儿又该吃完饭了：）。跟弟弟在家里在网上看了《大圣归来》，但我有点看不下去，实在觉得国产动画给人提不上劲的感觉：情节拖沓、动画不华丽，好在他放假后我们在奥斯卡影城看的《小黄人大眼萌》很精彩，其实本来要看《夏洛特烦恼》的，可以那天的场次时间不满意。本打算全家一起出去游玩，爸爸提出的建议有丹江口水库、鸭河水库、社旗山陕会馆，可惜因为种种琐事，最终没有成行。遗憾是有一些的，不过平平淡淡的生活才是最幸福的。\n\n\n![追风筝的人][3]\n回家后把《追风筝的人》这本书剩下的内容看完了。“为你，千千万万遍”是哈桑对阿米尔说过得话，也是阿米尔在找到哈桑的儿子后对他说过的话，出现过三次，三次出现的含义不同：为了你我可以追千千万万遍的风筝；也可以为你做所有的事情千千万万遍；可以千千万万遍的保护你，没有终止的那天。这么一个简单的句子，蕴含着绵延不尽的深情。本想写一篇读后感，可惜文笔不佳。豆瓣读书上这篇文章写的不错，其中的一些感悟是我深有体会却无法极力描述的。另外，这本书也被拍成了电影，豆瓣评分8.2，找个时间看看。\n\n\n----------\n原文如下：\n\n　　大凡是有深刻情感经历的人，对这句话都会有一定的敏感度。因为这句话里蕴涵着说者对听者饱满而充溢得几乎止不住外泄的深情。当我们一字一顿地默念这七个字时，“为、你、千、千、万、万、遍”，便仿佛身边所有的喧哗和嘈杂都在瞬间飞弛而去，它们乘上呼啸的列车，在生命的布景墙上渐渐淡开，没有愤懑、抱怨，也没有偏见、猜测、评判。我们所看见的，就是七朵静静的野蔷薇。\n\n\n　　你可以想象这是一段铭心刻骨的恋情，一方为着另一方千万次地奔波、努力、思念；也可以想象这是一种无法割舍的亲情，疲惫地伫立在火车站台上等候的母亲，千万次地祈祷、盼望、付出；当然，你还可以想象成一段生命里的友谊和默契……但这个故事却超离了这所有的想象之外，它很离奇地诉说着一个原本为兄弟血缘却在充满战火、信仰危机、种族争端的中东背景之下被人为隐瞒成主仆关系的两个不知情的孩子以及它们长大后的故事。这个故事情节跌荡起伏，然而，当我看到地位卑微而备受凌辱的哈桑执著地对阿米尔说出这七个字时，我确实忘却了弥漫在整部小说里的背叛、欺骗和救赎，于是，在我合上这本书以后，脑海里留下的是一片响着清脆笑声的小树林，它离这个世界很远。\n\n\n　　我以为，再黑暗的人性里总会有一道烛光。而正是这道烛光，就足以点亮灰冥无火的世界。这样看来，再悲剧的人物情节也会有过温暖的笑脸。 \n\n\n　　我们往往被迫诞生在一场既定的牌局里，在这场牌局之内，有固定的生活经历和人际关系网，这是幼稚的孩童无法认知和篡改的。因为他们清澈的双眼不认得声誉、金钱作祟的闹剧，也同样不认得人情的冷漠和悲凉。在责任的推脱下，每个人都活在不同的牌理之中。所以孩子是该得到原谅的，因为你完全不忍心鞭笞一个当时内心只是单纯地不理解甚至是憎恨父亲对仆人哈桑情感上的倾斜，只是想通过风筝大赛而获得十足的父爱而背叛哈桑的缺爱的富家小少爷阿米尔。孩子不会故意犯错，孩子的错都是大人的错。\n\n\n　　于是哈桑说：“为你，千千万万遍。”他的忠实和真诚就这样随着简单的语气荡漾开来……我想，罪赎和原谅确是很好地均衡了这个世界。三毛在《这种家庭生活》里写过一句话我到现在还记忆尤深：“爱是恒久忍耐而又有恩慈。”恒久，在时间的外衣下坚守着感情的从一而终；忍耐，弱化自身的个性尊严以学会包容；恩慈，普度陷入崖底的人心。在毫无文化水平的哈桑的内心中，贮存着的善良和怜悯之心会令很多人质疑学术争吵的意义。这样，再强势的文化也会在孩子的目光前低下高傲的头颅，因为那是人类原始的皈依和追述。\n\n\n　　为你，只为你。 \n    \n\n　　千千万万遍，哪怕千千万万遍。 \n    \n\n　　如果是你，你敢不敢说，又敢不敢用尽全力地说。\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/IMG_4521.JPG\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/IMG_4517.JPG\n  [3]: http://7xlt6k.com1.z0.glb.clouddn.com/813820553279.jpg","slug":"以此纪念2015年最后一个长假的结束","published":1,"updated":"2015-10-09T03:05:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrts8001u2trnwlm1e99t"},{"title":"什么是EXC_BAD_ACCESS以及如何调试","toc":true,"date":"2015-10-30T02:23:56.000Z","_content":"\n某些时候，你可能会遇到由EXC_BAD_ACCESS引起的崩溃。在这片文章中，你将学会什么是EXC_BAD_ACCESS，以及它是有什么引起的。我也将提出一些解决由EXC_BAD_ACCESS引起的bug的技巧。\n\n# 什么是EXC_BAD_ACCESS？\n一旦你理解了EXC_BAD_ACCESS的根本原因，你会更好地理解它这个含义模糊的名称。这里有一个简单的解释和一个更加专业的解释。让我们首先以这个简单的解释开始吧。\n\n## 保持简单\n无论何时你遇到了EXC_BAD_ACCESS，那就意味着你正在发送一个消息给一个对象，而这个对象已经被释放掉了。这是最常见的情况，但是下面来看看更多的解释。\n\n## 真正含义\n专业的解释有一些复杂。在C和Objective-C中，经常处理指针。指针无非是存储另一个变量的内存地址的变量。当你发送一个消息给一个对象，那么指向这个对象的指针需要被引用。这意味着，你取得这个指针指向的内存地址而且访问那块内存的值。\n\n\n当那块内存不再与你的应用程序映射，或者，换一种说法，那块内存不再以你所期许的方式被使用，那么，就有可能无法访问到那一块内存。当这种情况发生的时候，内核发送异常（ ** EXC ** ），表明你的应用程序无法访问到那块内存（** BAD ACCESS **）。\n\n\n概括起来就是：当你遇到EXC_BAD_ACCESS时，意味着你在尝试向一块内存发送消息，而这块内存无法执行这个消息。\n\n\n然而，有时候,EXC_BAD_ACCESS是由一个corrupt pointer引起的。每当你的应用程序程序尝试去引用一个corrupt pointer指针时，内核都会抛出一个异常。\n\n注：corrupt pointer：可以理解为『野指针』。指的是：指向一个已删除的对象或未申请访问受限内存区域的指针。与空指针不同，野指针无法通过简单地判断是否为 NULL避免，而只能通过养成良好的编程习惯来尽力减少。对野指针进行操作很容易造成程序错误。\n\n\n## 调试EXC_BAD_ACCESS\n调试EXC_BAD_ACCESS可能是棘手和令人沮丧的。显示，现在EXC_BAD_ACCESS对你来说不再是那么困难的事情了。\n\n\n你需要了解的第一件事情是，一旦内存块无法被访问到，你的应用程序就会崩溃。使这就是经常使调试EXC_BAD_ACCESS这么困难的原因。\n\n\n这同样适用于野指针。当你引用野指针时，情况就糟糕了。\n\n\n### Zombies\n虽然僵尸在过去的几年中才得到普及，但是，在Xcode中以及出现十多年了。『僵尸』这个名称听起来可能有些戏剧化，但是，这对于解释我们是如何调试EXC_BAD_ACCESS来说，是一个体现其特性的伟大的名字。\n\n\n在Xcode中，你可以启用僵尸对象（zombie objects），这意味着，被释放的对象\n\n\n\n\n\n","source":"_posts/什么是EXC_BAD_ACCESS以及如何调试.md","raw":"title: 什么是EXC_BAD_ACCESS以及如何调试\ntoc: true\ndate: 2015-10-30 10:23:56\ntags: [iOS, EXC_BAD_ACCESS，调试]\ncategories: [iOS]\n---\n\n某些时候，你可能会遇到由EXC_BAD_ACCESS引起的崩溃。在这片文章中，你将学会什么是EXC_BAD_ACCESS，以及它是有什么引起的。我也将提出一些解决由EXC_BAD_ACCESS引起的bug的技巧。\n\n# 什么是EXC_BAD_ACCESS？\n一旦你理解了EXC_BAD_ACCESS的根本原因，你会更好地理解它这个含义模糊的名称。这里有一个简单的解释和一个更加专业的解释。让我们首先以这个简单的解释开始吧。\n\n## 保持简单\n无论何时你遇到了EXC_BAD_ACCESS，那就意味着你正在发送一个消息给一个对象，而这个对象已经被释放掉了。这是最常见的情况，但是下面来看看更多的解释。\n\n## 真正含义\n专业的解释有一些复杂。在C和Objective-C中，经常处理指针。指针无非是存储另一个变量的内存地址的变量。当你发送一个消息给一个对象，那么指向这个对象的指针需要被引用。这意味着，你取得这个指针指向的内存地址而且访问那块内存的值。\n\n\n当那块内存不再与你的应用程序映射，或者，换一种说法，那块内存不再以你所期许的方式被使用，那么，就有可能无法访问到那一块内存。当这种情况发生的时候，内核发送异常（ ** EXC ** ），表明你的应用程序无法访问到那块内存（** BAD ACCESS **）。\n\n\n概括起来就是：当你遇到EXC_BAD_ACCESS时，意味着你在尝试向一块内存发送消息，而这块内存无法执行这个消息。\n\n\n然而，有时候,EXC_BAD_ACCESS是由一个corrupt pointer引起的。每当你的应用程序程序尝试去引用一个corrupt pointer指针时，内核都会抛出一个异常。\n\n注：corrupt pointer：可以理解为『野指针』。指的是：指向一个已删除的对象或未申请访问受限内存区域的指针。与空指针不同，野指针无法通过简单地判断是否为 NULL避免，而只能通过养成良好的编程习惯来尽力减少。对野指针进行操作很容易造成程序错误。\n\n\n## 调试EXC_BAD_ACCESS\n调试EXC_BAD_ACCESS可能是棘手和令人沮丧的。显示，现在EXC_BAD_ACCESS对你来说不再是那么困难的事情了。\n\n\n你需要了解的第一件事情是，一旦内存块无法被访问到，你的应用程序就会崩溃。使这就是经常使调试EXC_BAD_ACCESS这么困难的原因。\n\n\n这同样适用于野指针。当你引用野指针时，情况就糟糕了。\n\n\n### Zombies\n虽然僵尸在过去的几年中才得到普及，但是，在Xcode中以及出现十多年了。『僵尸』这个名称听起来可能有些戏剧化，但是，这对于解释我们是如何调试EXC_BAD_ACCESS来说，是一个体现其特性的伟大的名字。\n\n\n在Xcode中，你可以启用僵尸对象（zombie objects），这意味着，被释放的对象\n\n\n\n\n\n","slug":"什么是EXC_BAD_ACCESS以及如何调试","published":1,"updated":"2015-10-30T10:09:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsd00232trnct26qmbn"},{"title":"什么是EXC_BAD_ACCESS以及如何调试","toc":true,"date":"2015-10-30T02:23:56.000Z","_content":"","source":"_posts/什么是EXC-BAD-ACCESS以及如何调试.md","raw":"title: 什么是EXC_BAD_ACCESS以及如何调试\ntoc: true\ndate: 2015-10-30 10:23:56\ntags:\ncategories:\n---\n","slug":"什么是EXC-BAD-ACCESS以及如何调试","published":1,"updated":"2015-10-30T02:23:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsg00282trnn67tx00q"},{"_content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<style type = \"text/css\">\n\t\t\tbody{\n\t\t\t\tpadding-top: 40px;\n\t\t\t}\n\t\t</style>\n\t\t<title>WKWebView Demo</title>\n\t\t<meta charset=\"UTF-8\">\n\t</head>\n\t<body>\n\t\t<h1>WKWebView Test</h1>\n\t\t<script type = \"text/javascript\" src=\"main.js\"></script>\n\t</body>\n</html>","source":"_posts/index.html","raw":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<style type = \"text/css\">\n\t\t\tbody{\n\t\t\t\tpadding-top: 40px;\n\t\t\t}\n\t\t</style>\n\t\t<title>WKWebView Demo</title>\n\t\t<meta charset=\"UTF-8\">\n\t</head>\n\t<body>\n\t\t<h1>WKWebView Test</h1>\n\t\t<script type = \"text/javascript\" src=\"main.js\"></script>\n\t</body>\n</html>","slug":"index","published":1,"date":"2015-11-03T03:09:08.000Z","updated":"2015-11-02T03:29:19.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsi00292trnit1k2hfe"},{"title":"iOS开发总结","toc":true,"date":"2015-10-15T00:53:04.000Z","_content":"\n记录iOS开发过程中使用的技术、遇到的问题以及解决方法。\n\n<!-- more -->\n\n### 自定义系统键盘上方的View有两种方法\n1.设定textfield或者textview的inputAccessoryView属性\n2.监听键盘事件，获取键盘高度，动态改变自定义View的位置\n\n\n### CocoaPods 执行 pod update 和 pod install 卡住不动\n使用加参数的命令：\npod install --verbose --no-repo-update\n或者 \npod update --verbose --no-repo-update\n\n\n\n### 添加PCH文件\n![添加PCH文件][1]\n注意在BuildSetting中设置Prefix header路径\n\n\n\n\n### 添加讯飞语音需要的系统类库\n![添加讯飞语音需要注意的][2]\n\n### 安装CocoaPods错误\n如果是下面这个错误：\nCould not find a valid gem 'cocoapods' (>= 0), here is why: Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Op...\n\n解决方法，[看这里!](http://stackoverflow.com/questions/15305350/gem-install-fails-with-openssl-failure)\n\n\n\n### Undefined symbols for architecture arm64\n1. 检查Pod的TARGETS和工程项目的TARGETS的BuildSetting\n![此处输入图片的描述][3]\n\n2. 检查工程项目TARGETS的Other Linder Flags \n![此处输入图片的描述][4]\n\n\n\n### 理解armv7 armv7s arm64 i386 x86_64\n\n[看这篇博文](http://blog.csdn.net/lizhongfu2013/article/details/42387311)\n\n\n\n### 什么时候用Block或代理？\n[看这篇博文](http://blog.cocoabit.com/2014-01-19-block-delegate/)\n1.要是一个对象有超过一个的不同的事件，使用代理\n2.要是一个对象是个单例，我们不能使用代理\n3.要是一个对象调用方法需要返回一些额外的信息，我们可能需要使用代理\n4.过程 vs. 结果\n5.速度（也许吧？）\n\n具体情况，具体分析!\n\n\n\n### 使用%运算符出现错误：invalid operands to binary expression (‘CGFloat’(aka 'double') and 'CGFloat')\n\nCGFloat c = a % b;\n解决：% is for int or long, not float or double.\nYou can use fmod() or fmodf() from <math.h> instead.\nBetter is <tgmath.h> as suggested by the inventor of CGFloat.\n\n\n### Objective-C浮点数向上取整和向下取整：\n[看这里][5]\n\n    \n### TableView的分割线从顶端开始：\n        if ([self.tableView respondsToSelector:@selector(setLayoutMargins:)]) {  \n          [self.tableView setLayoutMargins:UIEdgeInsetsZero];  \n        } \n        \n        \n        if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {  \n         [cell setSeparatorInset:UIEdgeInsetsZero];  \n        }  \n        if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {  \n        [cell setLayoutMargins:UIEdgeInsetsZero];  \n        }\n\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-12%20%E4%B8%8A%E5%8D%889.35.57.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-14%20%E4%B8%8A%E5%8D%8810.38.35.png\n  [3]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%889.06.43.png\n  [4]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%889.10.01.png\n  [5]: http://blog.csdn.net/abc649395594/article/details/44730425","source":"_posts/iOS开发总结.md","raw":"title: iOS开发总结\ntoc: true\ndate: 2015-10-15 08:53:04\ntags: [知识小集, iOS]\ncategories: [iOS]\n---\n\n记录iOS开发过程中使用的技术、遇到的问题以及解决方法。\n\n<!-- more -->\n\n### 自定义系统键盘上方的View有两种方法\n1.设定textfield或者textview的inputAccessoryView属性\n2.监听键盘事件，获取键盘高度，动态改变自定义View的位置\n\n\n### CocoaPods 执行 pod update 和 pod install 卡住不动\n使用加参数的命令：\npod install --verbose --no-repo-update\n或者 \npod update --verbose --no-repo-update\n\n\n\n### 添加PCH文件\n![添加PCH文件][1]\n注意在BuildSetting中设置Prefix header路径\n\n\n\n\n### 添加讯飞语音需要的系统类库\n![添加讯飞语音需要注意的][2]\n\n### 安装CocoaPods错误\n如果是下面这个错误：\nCould not find a valid gem 'cocoapods' (>= 0), here is why: Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Op...\n\n解决方法，[看这里!](http://stackoverflow.com/questions/15305350/gem-install-fails-with-openssl-failure)\n\n\n\n### Undefined symbols for architecture arm64\n1. 检查Pod的TARGETS和工程项目的TARGETS的BuildSetting\n![此处输入图片的描述][3]\n\n2. 检查工程项目TARGETS的Other Linder Flags \n![此处输入图片的描述][4]\n\n\n\n### 理解armv7 armv7s arm64 i386 x86_64\n\n[看这篇博文](http://blog.csdn.net/lizhongfu2013/article/details/42387311)\n\n\n\n### 什么时候用Block或代理？\n[看这篇博文](http://blog.cocoabit.com/2014-01-19-block-delegate/)\n1.要是一个对象有超过一个的不同的事件，使用代理\n2.要是一个对象是个单例，我们不能使用代理\n3.要是一个对象调用方法需要返回一些额外的信息，我们可能需要使用代理\n4.过程 vs. 结果\n5.速度（也许吧？）\n\n具体情况，具体分析!\n\n\n\n### 使用%运算符出现错误：invalid operands to binary expression (‘CGFloat’(aka 'double') and 'CGFloat')\n\nCGFloat c = a % b;\n解决：% is for int or long, not float or double.\nYou can use fmod() or fmodf() from <math.h> instead.\nBetter is <tgmath.h> as suggested by the inventor of CGFloat.\n\n\n### Objective-C浮点数向上取整和向下取整：\n[看这里][5]\n\n    \n### TableView的分割线从顶端开始：\n        if ([self.tableView respondsToSelector:@selector(setLayoutMargins:)]) {  \n          [self.tableView setLayoutMargins:UIEdgeInsetsZero];  \n        } \n        \n        \n        if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {  \n         [cell setSeparatorInset:UIEdgeInsetsZero];  \n        }  \n        if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {  \n        [cell setLayoutMargins:UIEdgeInsetsZero];  \n        }\n\n\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-12%20%E4%B8%8A%E5%8D%889.35.57.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-14%20%E4%B8%8A%E5%8D%8810.38.35.png\n  [3]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%889.06.43.png\n  [4]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%889.10.01.png\n  [5]: http://blog.csdn.net/abc649395594/article/details/44730425","slug":"iOS开发总结","published":1,"updated":"2015-10-20T09:32:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsk002a2trnzjbuowpa"},{"title":"Swift Cheat Sheet [2] - Control Flow","toc":true,"date":"2015-10-22T02:28:13.000Z","_content":"# If 条件语句\n\n## if else\n    let number = 100\n    if number < 10 {\n        print(\"The number is small\")\n    } else if number > 100 {\n        print(\"The number is pretty big\")\n    } else {\n        print(\"The number is between 10 and 100\")\n    }\n\n<!-- more -->\n    \n    \n## if else + for in\n\n    let individualScores = [75, 43, 103, 87, 12]\n    var teamScore = 0\n    for score in individualScores {\n        if score > 50 {\n            teamScore += 3\n        } else {\n            teamScore += 1\n        }\n    }\n    print(teamScore)\n    \n    \n## 使用可选绑定\n\n    var optionalName: String?\n    var greeting = \"Hello!\"\n    if let name = optionalName {\n        greeting = \"Hello, \\(name)\"\n    }else\n    {\n        print(\"optionalName is nil\")\n    }\n    \n## 在if条件判断语句中使用where关键字\n\n    var optionalHello: String? = \"Hello\"\n    if let hello = optionalHello where hello.hasPrefix(\"H\"), let name = optionalName {\n        greeting = \"\\(hello), \\(name)\"\n        print(\"greeting:\\(greeting)\")\n    }else\n    {\n        //跳到这里，因为hello还没有被复制，它没有“H”前缀，仅当where模式匹配成功，if条件语句才执行。\n    }\n    \n# Switch\n\n## 一条case分支可匹配多个模式\n\n    let vegetable = \"red pepper\"\n    switch vegetable {\n        case \"celery\":\n            let vegetableComment = \"Add some raisins and make ants on a log.\"\n        case \"cucumber\", \"watercress\":\n            let vegetableComment = \"That would make a good tea sandwich.\"\n        case let x where x.hasSuffix(\"pepper\"):\n            let vegetableComment = \"Is it a spicy \\(x)?\"\n        default://必须有default分支\n            let vegetableComment = \"Everything tastes good in soup.\"\n    }\n    \n## 不存在隐式的贯穿\n下面的代码会有编译错误！\n\n    let anotherCharacter: Character = \"a\"\n    switch anotherCharacter {\n    case \"a\":\n    case \"A\":\n        print(\"The letter A\")\n    default:\n        print(\"Not the letter A\")\n    }\n    // this will report a compile-time error\n    \n## 区间匹配\n\n使用闭区间操作符`..`或开区间操作符`..<`\n\n    let approximateCount = 62\n    let countedThings = \"moons orbiting Saturn\"\n    var naturalCount: String\n    switch approximateCount {\n    case 0:\n        naturalCount = \"no\"\n    case 1..<5:\n        naturalCount = \"a few\"\n    case 5..<12:\n        naturalCount = \"several\"\n    case 12..<100:\n        naturalCount = \"dozens of\"\n    case 100..<1000:\n        naturalCount = \"hundreds of\"\n    default:\n        naturalCount = \"many\"\n    }\n    print(\"There are \\(naturalCount) \\(countedThings).\")\n    // 输出 \"There are dozens of moons orbiting Saturn.\"\n    \n## 使用元组\n\n    let somePoint = (1, 1)\n    switch somePoint {\n    case (0, 0):\n        print(\"(0, 0) is at the origin\")\n    case (_, 0):\n        print(\"(\\(somePoint.0), 0) is on the x-axis\")\n    case (0, _):\n        print(\"(0, \\(somePoint.1)) is on the y-axis\")\n    case (-2...2, -2...2):\n        print(\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\")\n    default:\n        print(\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\")\n    }\n    // 输出 \"(1, 1) is inside the box\"\n    \n> 如果存在多个匹配，那么只会执行第一个被匹配到的 case 分支。剩下的能够匹配 case 分支都会被忽视掉.\n\n## case分支中使用值绑定\n\n    let anotherPoint = (2, 0)\n    switch anotherPoint {\n    case (let x, 0):\n        print(\"on the x-axis with an x value of \\(x)\")\n    case (0, let y):\n        print(\"on the y-axis with a y value of \\(y)\")\n    case let (x, y):\n        print(\"somewhere else at (\\(x), \\(y))\")\n    }\n    // 输出 \"on the x-axis with an x value of 2\"\n    \n## 使用where 模式匹配\n\n    let yetAnotherPoint = (1, -1)\n    switch yetAnotherPoint {\n    case let (x, y) where x == y:\n        print(\"(\\(x), \\(y)) is on the line x == y\")\n    case let (x, y) where x == -y:\n        print(\"(\\(x), \\(y)) is on the line x == -y\")\n    case let (x, y):\n        print(\"(\\(x), \\(y)) is just some arbitrary point\")\n    }\n    // 输出 \"(1, -1) is on the line x == -y\"\n    \n    \n# For循环\n\n#使用For-In\n    var firstForLoop = 0\n    for i in 0..<4 {\n        firstForLoop += i\n    }\n    print(firstForLoop)\n    \n    \n    var secondForLoop = 0\n    for _ in 0...4 {\n        secondForLoop += 1\n    }\n    print(secondForLoop)\n    \n## 使用下划线_替代循环变量名\n如果你不需要知道区间内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问：\ncode:\n\n    let base = 3\n    let power = 10\n    var answer = 1\n    for _ in 1...power {\n        answer *= base\n    }\n    print(\"\\(base) to the power of \\(power) is \\(answer)\")\n    // 输出 \"3 to the power of 10 is 59049\"\n    \ncode2:\n\n    var secondForLoop = 0\n    for _ in 0...4 {\n        secondForLoop += 1\n    }\n    print(secondForLoop)\n    //输出5\n    \n## 遍历数组元素\n\n    let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]\n    for name in names {\n        print(\"Hello, \\(name)!\")\n    }\n    // Hello, Anna!\n    // Hello, Alex!\n    // Hello, Brian!\n    // Hello, Jack!\n    \n## 遍历字典的键值对\n\n字典元素的遍历顺序和插入顺序可能不同\n\n    let numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\":4]\n    for (animalName, legCount) in numberOfLegs{\n        print(\"\\(animalName)s have \\(legCount) legs\")\n    }\n    // ants have 6 legs\n    // cats have 4 legs\n    // spiders have 8 legs\n    \n## 使用条件判断和递增方法的标准 C 样式for循环\n\n    for var index = 0; index < 3; ++index {\n        print(\"index is \\(index)\")\n    }\n    // index is 0\n    // index is 1\n    // index is 2\n    \n# While循环\n\n## while\n\n    var count = 1\n    while count < 3 {\n        println(\"count is \\(count)\")\n        ++count\n    }\n    // count is 1\n    // count is 2\n    \n    count = 1\n    while count < 1 {\n        println(\"count is \\(count)\")\n        ++count\n    }\n\n## repeat-while\n\n    var count = 1\n    repeat {\n        print(\"count is \\(count)\")\n        ++count\n    } while count < 3\n    // count is 1\n    // count is 2\n    \n    count = 1\n    repeat {\n        print(\"count is \\(count)\")\n        ++count\n    } while count < 1\n    // count is 1\n    \n    \n\n\n\n    \n\n\n\n","source":"_posts/Swift Cheat Sheet [2] - Control Flow.md","raw":"title: Swift Cheat Sheet [2] - Control Flow\ntoc: true\ndate: 2015-10-22 10:28:13\ntags:\ncategories:\n---\n# If 条件语句\n\n## if else\n    let number = 100\n    if number < 10 {\n        print(\"The number is small\")\n    } else if number > 100 {\n        print(\"The number is pretty big\")\n    } else {\n        print(\"The number is between 10 and 100\")\n    }\n\n<!-- more -->\n    \n    \n## if else + for in\n\n    let individualScores = [75, 43, 103, 87, 12]\n    var teamScore = 0\n    for score in individualScores {\n        if score > 50 {\n            teamScore += 3\n        } else {\n            teamScore += 1\n        }\n    }\n    print(teamScore)\n    \n    \n## 使用可选绑定\n\n    var optionalName: String?\n    var greeting = \"Hello!\"\n    if let name = optionalName {\n        greeting = \"Hello, \\(name)\"\n    }else\n    {\n        print(\"optionalName is nil\")\n    }\n    \n## 在if条件判断语句中使用where关键字\n\n    var optionalHello: String? = \"Hello\"\n    if let hello = optionalHello where hello.hasPrefix(\"H\"), let name = optionalName {\n        greeting = \"\\(hello), \\(name)\"\n        print(\"greeting:\\(greeting)\")\n    }else\n    {\n        //跳到这里，因为hello还没有被复制，它没有“H”前缀，仅当where模式匹配成功，if条件语句才执行。\n    }\n    \n# Switch\n\n## 一条case分支可匹配多个模式\n\n    let vegetable = \"red pepper\"\n    switch vegetable {\n        case \"celery\":\n            let vegetableComment = \"Add some raisins and make ants on a log.\"\n        case \"cucumber\", \"watercress\":\n            let vegetableComment = \"That would make a good tea sandwich.\"\n        case let x where x.hasSuffix(\"pepper\"):\n            let vegetableComment = \"Is it a spicy \\(x)?\"\n        default://必须有default分支\n            let vegetableComment = \"Everything tastes good in soup.\"\n    }\n    \n## 不存在隐式的贯穿\n下面的代码会有编译错误！\n\n    let anotherCharacter: Character = \"a\"\n    switch anotherCharacter {\n    case \"a\":\n    case \"A\":\n        print(\"The letter A\")\n    default:\n        print(\"Not the letter A\")\n    }\n    // this will report a compile-time error\n    \n## 区间匹配\n\n使用闭区间操作符`..`或开区间操作符`..<`\n\n    let approximateCount = 62\n    let countedThings = \"moons orbiting Saturn\"\n    var naturalCount: String\n    switch approximateCount {\n    case 0:\n        naturalCount = \"no\"\n    case 1..<5:\n        naturalCount = \"a few\"\n    case 5..<12:\n        naturalCount = \"several\"\n    case 12..<100:\n        naturalCount = \"dozens of\"\n    case 100..<1000:\n        naturalCount = \"hundreds of\"\n    default:\n        naturalCount = \"many\"\n    }\n    print(\"There are \\(naturalCount) \\(countedThings).\")\n    // 输出 \"There are dozens of moons orbiting Saturn.\"\n    \n## 使用元组\n\n    let somePoint = (1, 1)\n    switch somePoint {\n    case (0, 0):\n        print(\"(0, 0) is at the origin\")\n    case (_, 0):\n        print(\"(\\(somePoint.0), 0) is on the x-axis\")\n    case (0, _):\n        print(\"(0, \\(somePoint.1)) is on the y-axis\")\n    case (-2...2, -2...2):\n        print(\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\")\n    default:\n        print(\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\")\n    }\n    // 输出 \"(1, 1) is inside the box\"\n    \n> 如果存在多个匹配，那么只会执行第一个被匹配到的 case 分支。剩下的能够匹配 case 分支都会被忽视掉.\n\n## case分支中使用值绑定\n\n    let anotherPoint = (2, 0)\n    switch anotherPoint {\n    case (let x, 0):\n        print(\"on the x-axis with an x value of \\(x)\")\n    case (0, let y):\n        print(\"on the y-axis with a y value of \\(y)\")\n    case let (x, y):\n        print(\"somewhere else at (\\(x), \\(y))\")\n    }\n    // 输出 \"on the x-axis with an x value of 2\"\n    \n## 使用where 模式匹配\n\n    let yetAnotherPoint = (1, -1)\n    switch yetAnotherPoint {\n    case let (x, y) where x == y:\n        print(\"(\\(x), \\(y)) is on the line x == y\")\n    case let (x, y) where x == -y:\n        print(\"(\\(x), \\(y)) is on the line x == -y\")\n    case let (x, y):\n        print(\"(\\(x), \\(y)) is just some arbitrary point\")\n    }\n    // 输出 \"(1, -1) is on the line x == -y\"\n    \n    \n# For循环\n\n#使用For-In\n    var firstForLoop = 0\n    for i in 0..<4 {\n        firstForLoop += i\n    }\n    print(firstForLoop)\n    \n    \n    var secondForLoop = 0\n    for _ in 0...4 {\n        secondForLoop += 1\n    }\n    print(secondForLoop)\n    \n## 使用下划线_替代循环变量名\n如果你不需要知道区间内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问：\ncode:\n\n    let base = 3\n    let power = 10\n    var answer = 1\n    for _ in 1...power {\n        answer *= base\n    }\n    print(\"\\(base) to the power of \\(power) is \\(answer)\")\n    // 输出 \"3 to the power of 10 is 59049\"\n    \ncode2:\n\n    var secondForLoop = 0\n    for _ in 0...4 {\n        secondForLoop += 1\n    }\n    print(secondForLoop)\n    //输出5\n    \n## 遍历数组元素\n\n    let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]\n    for name in names {\n        print(\"Hello, \\(name)!\")\n    }\n    // Hello, Anna!\n    // Hello, Alex!\n    // Hello, Brian!\n    // Hello, Jack!\n    \n## 遍历字典的键值对\n\n字典元素的遍历顺序和插入顺序可能不同\n\n    let numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\":4]\n    for (animalName, legCount) in numberOfLegs{\n        print(\"\\(animalName)s have \\(legCount) legs\")\n    }\n    // ants have 6 legs\n    // cats have 4 legs\n    // spiders have 8 legs\n    \n## 使用条件判断和递增方法的标准 C 样式for循环\n\n    for var index = 0; index < 3; ++index {\n        print(\"index is \\(index)\")\n    }\n    // index is 0\n    // index is 1\n    // index is 2\n    \n# While循环\n\n## while\n\n    var count = 1\n    while count < 3 {\n        println(\"count is \\(count)\")\n        ++count\n    }\n    // count is 1\n    // count is 2\n    \n    count = 1\n    while count < 1 {\n        println(\"count is \\(count)\")\n        ++count\n    }\n\n## repeat-while\n\n    var count = 1\n    repeat {\n        print(\"count is \\(count)\")\n        ++count\n    } while count < 3\n    // count is 1\n    // count is 2\n    \n    count = 1\n    repeat {\n        print(\"count is \\(count)\")\n        ++count\n    } while count < 1\n    // count is 1\n    \n    \n\n\n\n    \n\n\n\n","slug":"Swift Cheat Sheet [2] - Control Flow","published":1,"updated":"2015-10-30T03:17:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsn002e2trn02r704vo"},{"title":"Swift Cheat Sheet [1] — Basic Types","toc":true,"date":"2015-10-21T02:28:31.000Z","_content":"# 常量和变量\n## Varibales\n\n    var myInt = 1 //inexplicit type\n    var myExplicitInt : Int = 1 // explicit type\n    var x = 1, y = 2, z = 3 //declare multiple integers\n    myExplicitInt = 3 // set to another integer value\n    \n## Constants\n\n    let myInt = 1\n    myInt = 2 //compile-time error !!!\n    \n## 常量和变量的命名\n\n    let π = 3.14159\n    let 你好 = \"你好世界\"\n    let 🐶🐮 = \"dogcow\" //可以用任何字符作为常量或变量名，包括Unicode字符\n    \n    \n<!-- more -->\n    \n# 可选类型\n可选类型，暗示常量或者变量可以没有值。\n\n\n    let possibleNumber = \"123\"\n    let convertedNumber = Int(possibleNumber)\n    // convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"\n    \n## nil\n可以给可选变量赋值为nil来表示它没有值.\n\n    var serverResponseCode: Int? = 404\n    // serverResponseCode 包含一个可选的 Int 值 404\n    serverResponseCode = nil\n    // serverResponseCode 现在不包含值\n\n如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil\n\n    var surveyAnswer: String?\n    // surveyAnswer 被自动设置为 nil\n    \n注意：\n\n> - Swift 的nil和 Objective-C 中的nil并不一样。在 Objective-C 中，nil是一个指向不存在对象的指针。\n- 在Swift 中，nil不是指针——它是一个确定的值，用来表示值缺失。\n- 任何类型的可选状态都可以被设置为nil，不只是对象类型。\n- nil不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。\n\n\n##  if 语句以及可选值的强制解析（forced unwrapping）\n使用if语句和nil比较来判断一个可选值是否包含值\n当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值\n\n    var convertedNumber : Int? = 10\n    if convertedNumber != nil{\n        print(\"convertedNumber has an integer value of \\(convertedNumber!)\")\n    }\n    // 输出 \"convertedNumber has an integer value of 10\"\n\n## 可选绑定（option binding）\n使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量\n\n\n### 一个示例解析\n- 示例：\n\n    let possibleNumber = \"123\"\n    if let actualNumber = Int(possibleNumber){\n        print(\"\\'\\(possibleNumber)\\' has an integer value of \\(actualNumber)\")\n    }else{\n        print(\"\\'\\(possibleNumber)\\' could not be convered to an integer\")\n    }\n    \n- 解释这个示例：\n如果Int(possibleNumber)返回的可选Int包含一个值，创建一个叫做actualNumber的新常量并将可选包含的值赋给它。\n如果转换成功，actualNumber常量可以在if语句的第一个分支中使用。它已经被可选类型包含的值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，actualNumber只被用来输出转换结果。\n\n\n### 包含多个可选绑定在条件判断语句中\n\n    if let firstNumber = Int(\"4\"), secondNumber = Int(\"42\") where firstNumber < secondNumber\n    {\n        print(\"\\(firstNumber) < \\(secondNumber)\")\n    }\n    // prints \"4 < 42\"\n    \n## 隐式解析可选类型（implicitly unwrapped optionals）\n在Swift构造的过程中，当可选类型第一次赋值之后，就可以确定之后一直有值。这种情况下，可选类型的可选状态被定义为隐式解析可选类型。把可选类型后边的问号改为叹号。\n\n    let possibleString: String? = \"An optional string.\"\n    let forcedString: String = possibleString! // 需要惊叹号来获取值\n    \n    let assumedString: String! = \"An implicitly unwrapped optional string.\"\n    let implicitString: String = assumedString  // 不需要感叹号\n\n# 分号\n\n    //Swift不强制要求在语句结尾处使用分号，当然，也可以按照自己的习惯添加\n    //当在同一行内写多条独立的语句时，必须要用分号！\n    let cat = \"🐱\";print(cat)\n\n# 整数\n## 整数范围\n使用min和max属性获取整数的最小值和最大值\n\n    let minValue = UInt8.min // minValue 为 0，是 UInt8 类型\n    let maxValue = UInt8.max  // maxValue 为 255，是 UInt8 类型\n    \n## Int\n- 在32位平台上，Int和Int32长度相同。\n- 在64位平台上，Int和Int64长度相同。\n- Int足够用了。\n\n## UInt\n- 在32位平台上，UInt和UInt32长度相同。\n- 在64位平台上，UInt和UInt64长度相同。\n- 尽量不要使用UInt\n\n# 浮点数\n- Double表示64位浮点数，至少15位小数点。当你需要存储很大或者很高精度的浮点数时请使用此类型。\n- Float表示32位浮点数，至少6位小数点。精度要求不高的话可以使用此类型。\n\n\n# String\n## 操作符+\n\n    var myString = \"a\"\n    let myImmutableString = \"c\"\n    myString += \"b\" // ab\n    myString = myString + myImmutableString //abc\n    myImmutableString += \"d\" //compile-time error!!!\n    \n## 字符串插值\\\\(value)\n\n    let count = 7\n    let message = \"There are \\(count) days in a week\"\n    \n# Bool值在if语句中的应用\n\n    let turnipsAreDelicious = false\n    if turnipsAreDelicious {\n        print(\"Mmm, tasty turnips!\")\n    }else {\n        print(\"Eww, turnips are horrible.\")\n    }\n    \n# 元组\n元组（tuples）把多个值组合成一个复合值。元组内的值可以是**任意类型**，并不要求是相同类型。\n\n## 创建一个元组\n\n    let http404Error = (404, \"Not Found\")\n    //let http404Error = (404, \"Not Found\")\n    \n## 分解元组内容\n\n    let http404Error = (404, \"Not Found\")\n    let (statusCode, statusMessage) = http404Error\n    print((\"The status code is \\(statusCode)\"))\n    // 输出 \"The status code is 404\"\n    print(\"The status message is \\(statusMessage)\")\n    // 输出 \"The status message is Not Found\"\n    \n## 用下划线_忽略一部分元组值\n如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记：\n    \n    let (justTheStatusCode, _) = http404Error\n    print(\"The status code is \\(justTheStatusCode)\")\n    // 输出 \"The status code is 404\"\n    \n## 访问元组的单个元素\n\n    print(\"The status code is \\(http404Error.0)\")\n    // 输出 \"The status code is 404\"\n    print(\"The status message is \\(http404Error.1)\")\n    // 输出 \"The status message is Not Found\"\n    \n## 给元组的单个元素命名\n    \n    let http200Status = (statusCode: 200, description: \"OK\")\n    \n## 通过名字访问元组元素\n\n    print(\"The status code is \\(http200Status.statusCode)\")\n    // 输出 \"The status code is 200\"\n    print(\"The status description is \\(http200Status.description)\")\n    // 输出 \"The status message is OK\"\n\n# 类型别名\n\n    typealias AudioSample = UInt16\n    //使用typealias关键字来定义类型别名\n    var maxAmplitudeFound = AudioSample.min\n    //maxAmplitudeFound 现在是 0\n    \n\n\n\n# 类型转换\n\n## 整数和浮点数\n\n### 整数 to 浮点数\n\n    let three = 3\n    let pointOneFourOneFiveNine = 0.14159\n    let pi = Double(three) + pointOneFourOneFiveNine\n    // pi 等于 3.14159，所以被推测为 Double 类型\n    \n### 浮点数 to 整数\n\n    let integerPi = Int(pi)\n    // integerPi 等于 3，所以被推测为 Int 类型\n\n## 整数和字符串\n#### Int to String\n\n    let label = \"The width is\"\n    let width = 94\n    let widthLabel = label + String(width)// The width is 94\n    \n### String to Int\n\ncode1:\n\n    var myString = \"7\" //7\n    var possibleInt = Int(myString) //7\n    print(possibleInt) //\"Optional(7)\\n\"\n    \ncode2:\n\n    var myString1 = \"banana\" // \"banana\"\n    var possibleInt1 = Int(myString1) //nil\n    print(possibleInt1) // \"nil\\n\"\n    \n    \n# Printing\n\n    let name = \"Swift\"\n    println(\"Hello\")\n    pringln(\"My name is \\(name)\")\n    print(\"See you\")\n    print(later)\n    /*\n        Hello\n        My name is Swift\n        See you later\n    */\n    \n    \n# Logical Operators\n\n    var happy = true\n    var sad = !happy//logical NOT,sad = false\n    var everyoneHappy = happy && sad//logical AND, everyoneHappy = false\n    var someoneHappy = happy || sad //logical OR, someoneHappy = true\n\n\n# Functions\n\n    func iAdd(a:Int,b:Int,c:Int) -> Int{\n        return a + b + c\n    }\n    iAdd(1, b: 2, c: 3)//return 6\n    \n    \n    func eitherSide(n:Int)-> (nMinusOne:Int, nPlusOne:Int){\n        return(n-1, n+1)\n    }\n    eitherSide(5)//(.0 4, .1 6)\n    \n\n# Array\n\n## 空数组\n\n    // Creates an empty array.\n    let emptyArray = [String]() // []\n    \n## 索引\n\n    var ratingList = [\"Poor\", \"Fine\", \"Good\", \"Excellent\"]\n    ratingList[1] = \"k\"\n    ratingList // return [\"Poor\", \"OK\", \"Good\", \"Excellent\"]\n    \n## 拼接数组\n\n    var colors = [\"red\", \"blue\"] //[\"red\", \"blue\"]\n    var moreColors: [String] = [\"orange\", \"purple\"] //[\"orange\", \"purple\"]\n    colors.append(\"green\") //[\"red\", \"blue\", \"green\"]\n    colors += [\"yellow\"] //[\"red\", \"blue\", \"green\", \"yellow\"]\n    colors += moreColors //[\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"]\n    \n## 添加和删除元素\n\n    var days = [\"mon\", \"thu\"] \n    var firstDay = days[0] // mon\n    days.insert(\"tue\", atIndex: 1) // [mon, tue, thu]\n    days[2] = \"wed\"  // [mon, tue, wed]\n    days.removeAtIndex(0)  //[tue, wed]\n    \n# Dictionary\n\n    var days = [\"mon\": \"monday\", \"tue\": \"tuseday\"]\n    days[\"tue\"] = \"tuesday\" // change the value for key \"tue\"\n    days[\"wed\"] = \"wednesday\" // add a new key/value pair\n    \n    var moreDays: Dictionary = [\"thu\": \"thursday\", \"fri\": \"friday\"]\n    moreDays[\"thu\"] = nil // remove thu from the dictionary\n    moreDays.removeValueForKey(\"fri\") // remove fri from the dictionary\n\n\n\n    \n\n\n","source":"_posts/Swift Cheat Sheet [1] — Basic Types.md","raw":"title: Swift Cheat Sheet [1] — Basic Types\ntoc: true\ndate: 2015-10-21 10:28:31\ntags: [iOS, Swift, 知识小集]\ncategories: [iOS]\n---\n# 常量和变量\n## Varibales\n\n    var myInt = 1 //inexplicit type\n    var myExplicitInt : Int = 1 // explicit type\n    var x = 1, y = 2, z = 3 //declare multiple integers\n    myExplicitInt = 3 // set to another integer value\n    \n## Constants\n\n    let myInt = 1\n    myInt = 2 //compile-time error !!!\n    \n## 常量和变量的命名\n\n    let π = 3.14159\n    let 你好 = \"你好世界\"\n    let 🐶🐮 = \"dogcow\" //可以用任何字符作为常量或变量名，包括Unicode字符\n    \n    \n<!-- more -->\n    \n# 可选类型\n可选类型，暗示常量或者变量可以没有值。\n\n\n    let possibleNumber = \"123\"\n    let convertedNumber = Int(possibleNumber)\n    // convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"\n    \n## nil\n可以给可选变量赋值为nil来表示它没有值.\n\n    var serverResponseCode: Int? = 404\n    // serverResponseCode 包含一个可选的 Int 值 404\n    serverResponseCode = nil\n    // serverResponseCode 现在不包含值\n\n如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil\n\n    var surveyAnswer: String?\n    // surveyAnswer 被自动设置为 nil\n    \n注意：\n\n> - Swift 的nil和 Objective-C 中的nil并不一样。在 Objective-C 中，nil是一个指向不存在对象的指针。\n- 在Swift 中，nil不是指针——它是一个确定的值，用来表示值缺失。\n- 任何类型的可选状态都可以被设置为nil，不只是对象类型。\n- nil不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。\n\n\n##  if 语句以及可选值的强制解析（forced unwrapping）\n使用if语句和nil比较来判断一个可选值是否包含值\n当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值\n\n    var convertedNumber : Int? = 10\n    if convertedNumber != nil{\n        print(\"convertedNumber has an integer value of \\(convertedNumber!)\")\n    }\n    // 输出 \"convertedNumber has an integer value of 10\"\n\n## 可选绑定（option binding）\n使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量\n\n\n### 一个示例解析\n- 示例：\n\n    let possibleNumber = \"123\"\n    if let actualNumber = Int(possibleNumber){\n        print(\"\\'\\(possibleNumber)\\' has an integer value of \\(actualNumber)\")\n    }else{\n        print(\"\\'\\(possibleNumber)\\' could not be convered to an integer\")\n    }\n    \n- 解释这个示例：\n如果Int(possibleNumber)返回的可选Int包含一个值，创建一个叫做actualNumber的新常量并将可选包含的值赋给它。\n如果转换成功，actualNumber常量可以在if语句的第一个分支中使用。它已经被可选类型包含的值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，actualNumber只被用来输出转换结果。\n\n\n### 包含多个可选绑定在条件判断语句中\n\n    if let firstNumber = Int(\"4\"), secondNumber = Int(\"42\") where firstNumber < secondNumber\n    {\n        print(\"\\(firstNumber) < \\(secondNumber)\")\n    }\n    // prints \"4 < 42\"\n    \n## 隐式解析可选类型（implicitly unwrapped optionals）\n在Swift构造的过程中，当可选类型第一次赋值之后，就可以确定之后一直有值。这种情况下，可选类型的可选状态被定义为隐式解析可选类型。把可选类型后边的问号改为叹号。\n\n    let possibleString: String? = \"An optional string.\"\n    let forcedString: String = possibleString! // 需要惊叹号来获取值\n    \n    let assumedString: String! = \"An implicitly unwrapped optional string.\"\n    let implicitString: String = assumedString  // 不需要感叹号\n\n# 分号\n\n    //Swift不强制要求在语句结尾处使用分号，当然，也可以按照自己的习惯添加\n    //当在同一行内写多条独立的语句时，必须要用分号！\n    let cat = \"🐱\";print(cat)\n\n# 整数\n## 整数范围\n使用min和max属性获取整数的最小值和最大值\n\n    let minValue = UInt8.min // minValue 为 0，是 UInt8 类型\n    let maxValue = UInt8.max  // maxValue 为 255，是 UInt8 类型\n    \n## Int\n- 在32位平台上，Int和Int32长度相同。\n- 在64位平台上，Int和Int64长度相同。\n- Int足够用了。\n\n## UInt\n- 在32位平台上，UInt和UInt32长度相同。\n- 在64位平台上，UInt和UInt64长度相同。\n- 尽量不要使用UInt\n\n# 浮点数\n- Double表示64位浮点数，至少15位小数点。当你需要存储很大或者很高精度的浮点数时请使用此类型。\n- Float表示32位浮点数，至少6位小数点。精度要求不高的话可以使用此类型。\n\n\n# String\n## 操作符+\n\n    var myString = \"a\"\n    let myImmutableString = \"c\"\n    myString += \"b\" // ab\n    myString = myString + myImmutableString //abc\n    myImmutableString += \"d\" //compile-time error!!!\n    \n## 字符串插值\\\\(value)\n\n    let count = 7\n    let message = \"There are \\(count) days in a week\"\n    \n# Bool值在if语句中的应用\n\n    let turnipsAreDelicious = false\n    if turnipsAreDelicious {\n        print(\"Mmm, tasty turnips!\")\n    }else {\n        print(\"Eww, turnips are horrible.\")\n    }\n    \n# 元组\n元组（tuples）把多个值组合成一个复合值。元组内的值可以是**任意类型**，并不要求是相同类型。\n\n## 创建一个元组\n\n    let http404Error = (404, \"Not Found\")\n    //let http404Error = (404, \"Not Found\")\n    \n## 分解元组内容\n\n    let http404Error = (404, \"Not Found\")\n    let (statusCode, statusMessage) = http404Error\n    print((\"The status code is \\(statusCode)\"))\n    // 输出 \"The status code is 404\"\n    print(\"The status message is \\(statusMessage)\")\n    // 输出 \"The status message is Not Found\"\n    \n## 用下划线_忽略一部分元组值\n如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记：\n    \n    let (justTheStatusCode, _) = http404Error\n    print(\"The status code is \\(justTheStatusCode)\")\n    // 输出 \"The status code is 404\"\n    \n## 访问元组的单个元素\n\n    print(\"The status code is \\(http404Error.0)\")\n    // 输出 \"The status code is 404\"\n    print(\"The status message is \\(http404Error.1)\")\n    // 输出 \"The status message is Not Found\"\n    \n## 给元组的单个元素命名\n    \n    let http200Status = (statusCode: 200, description: \"OK\")\n    \n## 通过名字访问元组元素\n\n    print(\"The status code is \\(http200Status.statusCode)\")\n    // 输出 \"The status code is 200\"\n    print(\"The status description is \\(http200Status.description)\")\n    // 输出 \"The status message is OK\"\n\n# 类型别名\n\n    typealias AudioSample = UInt16\n    //使用typealias关键字来定义类型别名\n    var maxAmplitudeFound = AudioSample.min\n    //maxAmplitudeFound 现在是 0\n    \n\n\n\n# 类型转换\n\n## 整数和浮点数\n\n### 整数 to 浮点数\n\n    let three = 3\n    let pointOneFourOneFiveNine = 0.14159\n    let pi = Double(three) + pointOneFourOneFiveNine\n    // pi 等于 3.14159，所以被推测为 Double 类型\n    \n### 浮点数 to 整数\n\n    let integerPi = Int(pi)\n    // integerPi 等于 3，所以被推测为 Int 类型\n\n## 整数和字符串\n#### Int to String\n\n    let label = \"The width is\"\n    let width = 94\n    let widthLabel = label + String(width)// The width is 94\n    \n### String to Int\n\ncode1:\n\n    var myString = \"7\" //7\n    var possibleInt = Int(myString) //7\n    print(possibleInt) //\"Optional(7)\\n\"\n    \ncode2:\n\n    var myString1 = \"banana\" // \"banana\"\n    var possibleInt1 = Int(myString1) //nil\n    print(possibleInt1) // \"nil\\n\"\n    \n    \n# Printing\n\n    let name = \"Swift\"\n    println(\"Hello\")\n    pringln(\"My name is \\(name)\")\n    print(\"See you\")\n    print(later)\n    /*\n        Hello\n        My name is Swift\n        See you later\n    */\n    \n    \n# Logical Operators\n\n    var happy = true\n    var sad = !happy//logical NOT,sad = false\n    var everyoneHappy = happy && sad//logical AND, everyoneHappy = false\n    var someoneHappy = happy || sad //logical OR, someoneHappy = true\n\n\n# Functions\n\n    func iAdd(a:Int,b:Int,c:Int) -> Int{\n        return a + b + c\n    }\n    iAdd(1, b: 2, c: 3)//return 6\n    \n    \n    func eitherSide(n:Int)-> (nMinusOne:Int, nPlusOne:Int){\n        return(n-1, n+1)\n    }\n    eitherSide(5)//(.0 4, .1 6)\n    \n\n# Array\n\n## 空数组\n\n    // Creates an empty array.\n    let emptyArray = [String]() // []\n    \n## 索引\n\n    var ratingList = [\"Poor\", \"Fine\", \"Good\", \"Excellent\"]\n    ratingList[1] = \"k\"\n    ratingList // return [\"Poor\", \"OK\", \"Good\", \"Excellent\"]\n    \n## 拼接数组\n\n    var colors = [\"red\", \"blue\"] //[\"red\", \"blue\"]\n    var moreColors: [String] = [\"orange\", \"purple\"] //[\"orange\", \"purple\"]\n    colors.append(\"green\") //[\"red\", \"blue\", \"green\"]\n    colors += [\"yellow\"] //[\"red\", \"blue\", \"green\", \"yellow\"]\n    colors += moreColors //[\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"]\n    \n## 添加和删除元素\n\n    var days = [\"mon\", \"thu\"] \n    var firstDay = days[0] // mon\n    days.insert(\"tue\", atIndex: 1) // [mon, tue, thu]\n    days[2] = \"wed\"  // [mon, tue, wed]\n    days.removeAtIndex(0)  //[tue, wed]\n    \n# Dictionary\n\n    var days = [\"mon\": \"monday\", \"tue\": \"tuseday\"]\n    days[\"tue\"] = \"tuesday\" // change the value for key \"tue\"\n    days[\"wed\"] = \"wednesday\" // add a new key/value pair\n    \n    var moreDays: Dictionary = [\"thu\": \"thursday\", \"fri\": \"friday\"]\n    moreDays[\"thu\"] = nil // remove thu from the dictionary\n    moreDays.removeValueForKey(\"fri\") // remove fri from the dictionary\n\n\n\n    \n\n\n","slug":"Swift Cheat Sheet [1] — Basic Types","published":1,"updated":"2015-10-22T02:24:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsq002f2trnlaad59vj"},{"title":"Markdown为写作而生","date":"2015-09-16T09:02:23.000Z","toc":true,"_content":"\n> 学习Markdown知识，纵享写作之乐！\n \n<!-- more -->\n\n## 写作有什么难题？Markdown是如何解决的？\n\n\n### .doc 或 Pages 格式有如下问题：\n\n1. 不一定谁都能打开。用 Windows 的人打不开 .pages 文件，用旧版 Word 的人不一定能打开你用新版 Word 写的稿子。\n\n2. 对方看到的稿子的样子和你自己看到的可能差别很大。\n\n3. Office 已经是你电脑上唯一的盗版软件，导致心情不佳。\n\n\n### 使用Markdown有如下好处：\n1. **兼顾了「什么人都能打开」和「样式」**\n    Markdown 就是纯文本，就是 txt，所以什么人都能打开。而如上所述，你可以用它来标记文本的样式，而且语法非常简单。\n\n  由于是纯文本，Markdown 文稿也不会因为未来软件升级而产生不同版本之间的兼容问题，即，不会出现「我这篇稿子是用旧版 Word 写的，你用新版 Word 看可能格式会有点问题」的情况。\n  \n2. **Markdown 转 HTML 非常方便，对未来有益处**\n    HTML 是整个万维网（web）的标记语言，但更重要的是，它也是目前主流电子书格式所用的标记语言。无论是 EPUB, mobi，还是 Kindle 用的专有格式 .azw，都只是把一堆 HTML 文件打包而已。如果你写的是书，用 Markdown 标注格式之后，可以很方便地转为以上格式（当然这个转换工作不需要由你来做）；如果你写的是单篇的文章（例如新闻报道或专栏），未来也不排除结集出书的可能。若采用 Markdown，对于日后的文件转换工作也大有裨益。\n\n\n## Markdown的使用群\n\n    \n### 文艺青年\n\n - [為什麼文科生也該用markdown寫作](http://www.douban.com/note/221187015/)\n - [为什么作家应该用 Markdown 保存自己的文稿](http://www.jianshu.com/p/qqGjLN)\n\n### 科学青年\n\n - [如何学习科学：开放科学工具箱](https://github.com/ouyangzhiping/openscience/blob/master/README.md)\n\n\n## Markdown基本语法\n\n\n\n### 段落\n\n\n段落的前后要有一个以上的空行。（空行的定义是显示上看起来像是空行，就被视为空行。例如一行中只有空白和Tab，那么该行也被视为空行），普通的段落不需要用空白或制表符来缩进。\n\n\n----------\n\n### 标题\n\n\nMarkdown 支持两种标题的语法:\n\n - Setext:用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）\n - atx:行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶\n\nSetext:\n\n    标题一\n    =======\n        \n    标题二\n    ------\n\n\n\natx：\n\n        # 标题一\n        ## 标题二\n        ### 标题三\n        #### 标题四\n        ##### 标题五\n        ###### 标题六\n\n\n\n----------\n\n\n### 区块引用\n\n\n区块引用则使用 email 形式的 '>' 角括号\n\n    >这是一个区块引用\n    >\n    >这是区块引用的第二段\n    >\n    >## 这是一个区块引用中的二级标题\n    \n显示效果为：\n>这是一个区块引用\n>\n>这是区块引用的第二段\n>\n>## 这是一个区块引用中的二级标题\n\n\n**输出HTML：**\n\n    <h1>A first Leavel Header</h1>\n    <h2>A Second Leavel Header</h2>\n    <p>Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.</p>\n    <p>The quick brown fox jumped over the lazy\n    dog's back.</p>\n    <h3>Header 3</h3>\n    <blockquote>\n    <p>This is a blockquote.</p>\n    <p>This is the second paragraph in the blockquote.</p>\n    <h2>This is an H2 in a blockquote</h2>\n    </blockquote>\n\n----------\n\n\n### 修辞和强调\n\n\nMarkdown 使用星号和底线来标记需要强调的区段。\n示例：\n\n     *文字两边各添加一个星号表示斜体字*\n     _文字两边各添加一个短下划线表示斜体字_\n    \n    \n    **文字两边各添加两个星号表示粗体字**\n    __文字两边各添加两个短下划线表示粗体字__\n    \n显示效果为：\n*文字两边各添加一个星号表示斜体字*\n_文字两边各添加一个短下划线表示斜体字_\n    \n**文字两边各添加两个星号表示粗体字**\n__文字两边各添加两个短下划线表示粗体字__\n\n输出HTML为：\n\n    <em>斜体字 </em>\n    <strong>粗体字</strong>\n\n\n----------\n\n### 无序列表\n\n\n无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的。任何数量的 * 、= 和 - 都可以有效果。\n\n\n使用星号：\n星号前面再添加一个空格则生成一个二级列表。\n\n     * Item1\n     * Item2\n      * 1\n      * 2\n      * 3\n     * Item3\n\n\n使用加号：\n\n    + Item1\n    + Item2\n     + 1\n     + 2\n     + 3\n    + Item3\n\n\n使用减号：\n\n    - Item1\n    - Item2\n     - 1\n    - 2\n    - 3\n    - Item3\n\n以上的显示效果都是这样的：\n\n- Item1\n- Item2\n - 1\n - 2\n - 3\n- Item3\n\n以上都会输出HTML为：\n\n    <ul>\n    <li>Item1</li>\n    <li>Item2</li>\n    <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    </ul>\n    <li>Item3</li>\n    </ul>\n\n\n----------\n\n\n### 有序列表\n\n\n有序的列表则是使用一般的数字接着一个英文句点,后跟一个空格，作为项目标记\n\n        1. Item1\n        2. Item2\n         1. Red\n        2. Yellow\n        3. Blue\n        3. Item3\n\n显示效果为：\n\n1. Item1\n2. Item2\n    1. Red\n    2. Yellow\n    3. Blue\n3. Item3\n\n\n输出的HTML为：\n\n    <ol>\n    <li>Item1</li>\n    <li>Item2</li>\n    <ol>\n    <li>Red</li>\n    <li>Yellow</li>\n    <li>Blue</li>\n    </ol>\n    <li>Item3</li>\n    </ol>\n    \n   \n\n\n----------\n\n\n\n### 代码区块\n\n\n和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 `<pre>`和`<code>`标签来把代码区块包起来。\n\n要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：\n\n这是一个普通段落\n\n    这是一个代码区块\n\n\nMarkdown 会转换成：\n\n    <p>这是一个普通段落</p>\n    \n    <pre><code>这是一个代码区块</code></pre>\n    \n\nHere is an example of AppleScript:\n\n    tell application \"Foo\"\n    beep\n    end tell\n\n会被Markdown转化成：\n\n    <p>Here is an example of AppleScript:</p>\n    \n    <pre><code>tell application \"Foo\"\n        beep\n    end tell\n    </code></pre>\n    \n    \n一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。\n\n在代码区块里面， & 、 < 和 > 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：\n\n     <div class=\"footer\">\n            &copy; 2004 Foo Corporation\n        </div>\n        \n\n会被Markdown转为：\n\n    <pre><code>&lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n    </code></pre>\n    \n  \n\n\n----------\n\n\n### 分割线\n\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n     * * *\n     ***\n     **********\n     - - -\n     ------------\n\n\n----------\n\n\n### 链接\n\n\nMarkdown 支持两种形式的链接语法： **行内式**和**参考式**两种形式。不管是哪一种，链接文字都是用 [方括号] 来标记。\n\n要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：\n\n这是一个[行内链接](http://example.com/ \"链接的Title\")的例子\n\n这是一个没有title的[行内链接](http://example.com/)\n\nMarkDown会产生：\n\n    这是一个[行内链接](http://example.com/ \"链接的Title\")的例子\n    \n    这是一个没有title的[行内链接](http://example.com/)\n    \n    \n如果是链接到同样主机的资源，可以使用相对路径：\nSee my [About](/about ) page for details\nMarkdown会产生：\n\n    See my [About](/about ) page for details\n\n\n参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：\nThis is [an example] [id] reference-style link.\nMarkdown产生：\n\n    This is [an example] [id] reference-style link.\n\n接着，在文件的任意处，你可以把这个标记的链接内容定义出来：\n    [id]:http://example.com/  \"Optional Title Here\"\n\n\n链接内容定义的形式为:\n\n - 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接标记文字\n - 接着一个冒号\n - 接着一个以上的空格或制表符\n - 接着链接的网址\n - 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n\n \n下面这三种链接的定义都是相同：\n\n    [foo]: http://example.com/  \"Optional Title Here\"\n    [foo]: http://example.com/  'Optional Title Here'\n    [foo]: http://example.com/  (Optional Title Here)\n    \n**请注意**：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。\n\n链接网址也可以用尖括号包起来：\n\n    [id]: <http://example.com/>  \"Optional Title Here\"\n    \n你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：\n\n    [id]: http://example.com/longish/path/to/resource/here\n        \"Optional Title Here\"\n \n \n网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。\n\n链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：\n\n    [link text][a]\n    [link text][A]\n    \n隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 \"Google\" 链接到 google.com，你可以简化成：\n\n    [Google][]  \n\n然后定义链接内容：\n\n    [Google]: http://google.com/\n\n由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：\n\n    Visit [Daring Fireball][] for more information.\n\n然后接着定义链接：\n\n    [Daring Fireball]: http://daringfireball.net/\n    \n链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。\n\n 参考式链接的好处： \n> 使用 Markdown的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。\n\n\n----------\n\n### 代码\n\n\n如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：\n    \n    Use the `printf()` function.\n会产生：\nUse the `printf()` function.\n\n    \n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：\n\n    ``There is a literal backtick (`) here.``\n\n这段语法会产生：\n\n``There is a literal backtick (`) here.``\n\n    \n代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：\n\n    A single backtick in a code span: `` ` ``\n    \n    A backtick-delimited string in a code span: `` `foo` ``\n\n\n会产生：\n\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n\n\n    \n在代码区段内，& 和尖括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：\n\nPlease don't use any `<blink>` tags.\n\n    <p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>\n    \n你也可以这样写：\n\n    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n\n以产生：\n<p><code>&amp;#8212;</code> is the decimal-encoded\nequivalent of <code>&amp;mdash;</code>.</p>\n\n\n---------\n<span id = \"3.11\">\n### 图片\n</span>\n\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n行内式的图片语法看起来像是：\n\n    ![Alt text](/path/to/img.jpg)\n    \n    ![Alt text](/path/to/img.jpg \"Optional title\")\n\n详细叙述如下：\n\n - 一个惊叹号 !\n - 接着一个方括号，里面放上图片的替代文字\n - 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。\n \n参考式的图片语法是这样的：\n\n    ！[Alt text][id]\n\n「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：\n\n    [id]: url/to/image  \"Optional title attribute\"\n\n到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。\n\n-----------\n<span id = \"3.12\">\n### 其他\n</span>\n\n<span id = \"3.12.1\">\n#### 自动链接\n</span>\n\nMarkdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来：\n\n    <http://example.com/>\n    \n-------------\n<span id = \"3.12.2\">\n#### 反斜杠\n</span>\n\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用` <em>` 标签），你可以在星号的前面加上反斜杠：\n\n    \\*literal asterisks\\*\n\nMarkdown产出为：\n    \\*literal asterisks\\*\n    \nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n    \\   反斜线\n    `   反引号\n    *   星号\n    _   底线\n    {}  花括号\n    []  方括号\n    ()  括弧\n    #   井字号\n    +   加号\n    -   减号\n    .   英文句点\n    !   惊叹号","source":"_posts/Markdown为写作而生.md","raw":"title: Markdown为写作而生\ndate: 2015-09-16 17:02:23\ntags: [知识小集,Markdown,写作工具]\ntoc: true\n---\n\n> 学习Markdown知识，纵享写作之乐！\n \n<!-- more -->\n\n## 写作有什么难题？Markdown是如何解决的？\n\n\n### .doc 或 Pages 格式有如下问题：\n\n1. 不一定谁都能打开。用 Windows 的人打不开 .pages 文件，用旧版 Word 的人不一定能打开你用新版 Word 写的稿子。\n\n2. 对方看到的稿子的样子和你自己看到的可能差别很大。\n\n3. Office 已经是你电脑上唯一的盗版软件，导致心情不佳。\n\n\n### 使用Markdown有如下好处：\n1. **兼顾了「什么人都能打开」和「样式」**\n    Markdown 就是纯文本，就是 txt，所以什么人都能打开。而如上所述，你可以用它来标记文本的样式，而且语法非常简单。\n\n  由于是纯文本，Markdown 文稿也不会因为未来软件升级而产生不同版本之间的兼容问题，即，不会出现「我这篇稿子是用旧版 Word 写的，你用新版 Word 看可能格式会有点问题」的情况。\n  \n2. **Markdown 转 HTML 非常方便，对未来有益处**\n    HTML 是整个万维网（web）的标记语言，但更重要的是，它也是目前主流电子书格式所用的标记语言。无论是 EPUB, mobi，还是 Kindle 用的专有格式 .azw，都只是把一堆 HTML 文件打包而已。如果你写的是书，用 Markdown 标注格式之后，可以很方便地转为以上格式（当然这个转换工作不需要由你来做）；如果你写的是单篇的文章（例如新闻报道或专栏），未来也不排除结集出书的可能。若采用 Markdown，对于日后的文件转换工作也大有裨益。\n\n\n## Markdown的使用群\n\n    \n### 文艺青年\n\n - [為什麼文科生也該用markdown寫作](http://www.douban.com/note/221187015/)\n - [为什么作家应该用 Markdown 保存自己的文稿](http://www.jianshu.com/p/qqGjLN)\n\n### 科学青年\n\n - [如何学习科学：开放科学工具箱](https://github.com/ouyangzhiping/openscience/blob/master/README.md)\n\n\n## Markdown基本语法\n\n\n\n### 段落\n\n\n段落的前后要有一个以上的空行。（空行的定义是显示上看起来像是空行，就被视为空行。例如一行中只有空白和Tab，那么该行也被视为空行），普通的段落不需要用空白或制表符来缩进。\n\n\n----------\n\n### 标题\n\n\nMarkdown 支持两种标题的语法:\n\n - Setext:用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）\n - atx:行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶\n\nSetext:\n\n    标题一\n    =======\n        \n    标题二\n    ------\n\n\n\natx：\n\n        # 标题一\n        ## 标题二\n        ### 标题三\n        #### 标题四\n        ##### 标题五\n        ###### 标题六\n\n\n\n----------\n\n\n### 区块引用\n\n\n区块引用则使用 email 形式的 '>' 角括号\n\n    >这是一个区块引用\n    >\n    >这是区块引用的第二段\n    >\n    >## 这是一个区块引用中的二级标题\n    \n显示效果为：\n>这是一个区块引用\n>\n>这是区块引用的第二段\n>\n>## 这是一个区块引用中的二级标题\n\n\n**输出HTML：**\n\n    <h1>A first Leavel Header</h1>\n    <h2>A Second Leavel Header</h2>\n    <p>Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.</p>\n    <p>The quick brown fox jumped over the lazy\n    dog's back.</p>\n    <h3>Header 3</h3>\n    <blockquote>\n    <p>This is a blockquote.</p>\n    <p>This is the second paragraph in the blockquote.</p>\n    <h2>This is an H2 in a blockquote</h2>\n    </blockquote>\n\n----------\n\n\n### 修辞和强调\n\n\nMarkdown 使用星号和底线来标记需要强调的区段。\n示例：\n\n     *文字两边各添加一个星号表示斜体字*\n     _文字两边各添加一个短下划线表示斜体字_\n    \n    \n    **文字两边各添加两个星号表示粗体字**\n    __文字两边各添加两个短下划线表示粗体字__\n    \n显示效果为：\n*文字两边各添加一个星号表示斜体字*\n_文字两边各添加一个短下划线表示斜体字_\n    \n**文字两边各添加两个星号表示粗体字**\n__文字两边各添加两个短下划线表示粗体字__\n\n输出HTML为：\n\n    <em>斜体字 </em>\n    <strong>粗体字</strong>\n\n\n----------\n\n### 无序列表\n\n\n无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的。任何数量的 * 、= 和 - 都可以有效果。\n\n\n使用星号：\n星号前面再添加一个空格则生成一个二级列表。\n\n     * Item1\n     * Item2\n      * 1\n      * 2\n      * 3\n     * Item3\n\n\n使用加号：\n\n    + Item1\n    + Item2\n     + 1\n     + 2\n     + 3\n    + Item3\n\n\n使用减号：\n\n    - Item1\n    - Item2\n     - 1\n    - 2\n    - 3\n    - Item3\n\n以上的显示效果都是这样的：\n\n- Item1\n- Item2\n - 1\n - 2\n - 3\n- Item3\n\n以上都会输出HTML为：\n\n    <ul>\n    <li>Item1</li>\n    <li>Item2</li>\n    <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    </ul>\n    <li>Item3</li>\n    </ul>\n\n\n----------\n\n\n### 有序列表\n\n\n有序的列表则是使用一般的数字接着一个英文句点,后跟一个空格，作为项目标记\n\n        1. Item1\n        2. Item2\n         1. Red\n        2. Yellow\n        3. Blue\n        3. Item3\n\n显示效果为：\n\n1. Item1\n2. Item2\n    1. Red\n    2. Yellow\n    3. Blue\n3. Item3\n\n\n输出的HTML为：\n\n    <ol>\n    <li>Item1</li>\n    <li>Item2</li>\n    <ol>\n    <li>Red</li>\n    <li>Yellow</li>\n    <li>Blue</li>\n    </ol>\n    <li>Item3</li>\n    </ol>\n    \n   \n\n\n----------\n\n\n\n### 代码区块\n\n\n和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 `<pre>`和`<code>`标签来把代码区块包起来。\n\n要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：\n\n这是一个普通段落\n\n    这是一个代码区块\n\n\nMarkdown 会转换成：\n\n    <p>这是一个普通段落</p>\n    \n    <pre><code>这是一个代码区块</code></pre>\n    \n\nHere is an example of AppleScript:\n\n    tell application \"Foo\"\n    beep\n    end tell\n\n会被Markdown转化成：\n\n    <p>Here is an example of AppleScript:</p>\n    \n    <pre><code>tell application \"Foo\"\n        beep\n    end tell\n    </code></pre>\n    \n    \n一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。\n\n在代码区块里面， & 、 < 和 > 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：\n\n     <div class=\"footer\">\n            &copy; 2004 Foo Corporation\n        </div>\n        \n\n会被Markdown转为：\n\n    <pre><code>&lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n    </code></pre>\n    \n  \n\n\n----------\n\n\n### 分割线\n\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n     * * *\n     ***\n     **********\n     - - -\n     ------------\n\n\n----------\n\n\n### 链接\n\n\nMarkdown 支持两种形式的链接语法： **行内式**和**参考式**两种形式。不管是哪一种，链接文字都是用 [方括号] 来标记。\n\n要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：\n\n这是一个[行内链接](http://example.com/ \"链接的Title\")的例子\n\n这是一个没有title的[行内链接](http://example.com/)\n\nMarkDown会产生：\n\n    这是一个[行内链接](http://example.com/ \"链接的Title\")的例子\n    \n    这是一个没有title的[行内链接](http://example.com/)\n    \n    \n如果是链接到同样主机的资源，可以使用相对路径：\nSee my [About](/about ) page for details\nMarkdown会产生：\n\n    See my [About](/about ) page for details\n\n\n参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：\nThis is [an example] [id] reference-style link.\nMarkdown产生：\n\n    This is [an example] [id] reference-style link.\n\n接着，在文件的任意处，你可以把这个标记的链接内容定义出来：\n    [id]:http://example.com/  \"Optional Title Here\"\n\n\n链接内容定义的形式为:\n\n - 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接标记文字\n - 接着一个冒号\n - 接着一个以上的空格或制表符\n - 接着链接的网址\n - 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n\n \n下面这三种链接的定义都是相同：\n\n    [foo]: http://example.com/  \"Optional Title Here\"\n    [foo]: http://example.com/  'Optional Title Here'\n    [foo]: http://example.com/  (Optional Title Here)\n    \n**请注意**：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。\n\n链接网址也可以用尖括号包起来：\n\n    [id]: <http://example.com/>  \"Optional Title Here\"\n    \n你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：\n\n    [id]: http://example.com/longish/path/to/resource/here\n        \"Optional Title Here\"\n \n \n网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。\n\n链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：\n\n    [link text][a]\n    [link text][A]\n    \n隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 \"Google\" 链接到 google.com，你可以简化成：\n\n    [Google][]  \n\n然后定义链接内容：\n\n    [Google]: http://google.com/\n\n由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：\n\n    Visit [Daring Fireball][] for more information.\n\n然后接着定义链接：\n\n    [Daring Fireball]: http://daringfireball.net/\n    \n链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。\n\n 参考式链接的好处： \n> 使用 Markdown的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。\n\n\n----------\n\n### 代码\n\n\n如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：\n    \n    Use the `printf()` function.\n会产生：\nUse the `printf()` function.\n\n    \n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：\n\n    ``There is a literal backtick (`) here.``\n\n这段语法会产生：\n\n``There is a literal backtick (`) here.``\n\n    \n代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：\n\n    A single backtick in a code span: `` ` ``\n    \n    A backtick-delimited string in a code span: `` `foo` ``\n\n\n会产生：\n\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n\n\n    \n在代码区段内，& 和尖括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：\n\nPlease don't use any `<blink>` tags.\n\n    <p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>\n    \n你也可以这样写：\n\n    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n\n以产生：\n<p><code>&amp;#8212;</code> is the decimal-encoded\nequivalent of <code>&amp;mdash;</code>.</p>\n\n\n---------\n<span id = \"3.11\">\n### 图片\n</span>\n\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n行内式的图片语法看起来像是：\n\n    ![Alt text](/path/to/img.jpg)\n    \n    ![Alt text](/path/to/img.jpg \"Optional title\")\n\n详细叙述如下：\n\n - 一个惊叹号 !\n - 接着一个方括号，里面放上图片的替代文字\n - 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。\n \n参考式的图片语法是这样的：\n\n    ！[Alt text][id]\n\n「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：\n\n    [id]: url/to/image  \"Optional title attribute\"\n\n到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。\n\n-----------\n<span id = \"3.12\">\n### 其他\n</span>\n\n<span id = \"3.12.1\">\n#### 自动链接\n</span>\n\nMarkdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来：\n\n    <http://example.com/>\n    \n-------------\n<span id = \"3.12.2\">\n#### 反斜杠\n</span>\n\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用` <em>` 标签），你可以在星号的前面加上反斜杠：\n\n    \\*literal asterisks\\*\n\nMarkdown产出为：\n    \\*literal asterisks\\*\n    \nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n    \\   反斜线\n    `   反引号\n    *   星号\n    _   底线\n    {}  花括号\n    []  方括号\n    ()  括弧\n    #   井字号\n    +   加号\n    -   减号\n    .   英文句点\n    !   惊叹号","slug":"Markdown为写作而生","published":1,"updated":"2015-09-23T07:52:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsu002l2trnqziv0a7u"},{"title":"Hexo使用多说插件","date":"2015-09-23T03:37:21.000Z","toc":true,"_content":"\n多说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。下面简单说说如何在Hexo的博客中使用多说。\n\n<!-- more -->\n\n## 创建多说账号\n打开[这个网页](http://duoshuo.com/create-site)创建。\n![创建账号][1]\n填入个人信息，点击创建。\n其中 多说域名 填入的信息就是short_name，在后面要用到。\n\n\n## 修改主题的_config.yml\n在_config.yml中添加多说的配置，如下：\n\n    duoshuo_shortname: 你站点的short_name\n\n\n\n## 复制通用代码保存到博客模板\n ![此处输入图片的描述][2]\n将通用代码中的：\n请将此处替换成文章在你的站点中的ID 替换为 <%= page.path %>\n请替换成文章的标题 替换为 <%= page.title %>\n请替换成文章的网址 替换为 <%= page.permalink %>\n效果如下：\n\n    <div class=\"ds-thread\" data-thread-key=\"<%= page.path %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-09-23%20%E4%B8%8A%E5%8D%8811.40.36.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-09-23%20%E4%B8%8A%E5%8D%8811.43.07.png\n  \n## 修改themes\\landscape\\layout\\_partial\\article.ejs模板\n\n把\n\n      <% if (!index && post.comments && config.disqus_shortname){ %>\n      <section id=\"comments\">\n        <div id=\"disqus_thread\">\n          <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n        </div>\n      </section>\n      <% } %>\n改为你复制的通用代码。","source":"_posts/Hexo使用多说插件.md","raw":"title: Hexo使用多说插件\ndate: 2015-09-23 11:37:21\ntags: [知识小集,Hexo]\ntoc: true\n---\n\n多说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。下面简单说说如何在Hexo的博客中使用多说。\n\n<!-- more -->\n\n## 创建多说账号\n打开[这个网页](http://duoshuo.com/create-site)创建。\n![创建账号][1]\n填入个人信息，点击创建。\n其中 多说域名 填入的信息就是short_name，在后面要用到。\n\n\n## 修改主题的_config.yml\n在_config.yml中添加多说的配置，如下：\n\n    duoshuo_shortname: 你站点的short_name\n\n\n\n## 复制通用代码保存到博客模板\n ![此处输入图片的描述][2]\n将通用代码中的：\n请将此处替换成文章在你的站点中的ID 替换为 <%= page.path %>\n请替换成文章的标题 替换为 <%= page.title %>\n请替换成文章的网址 替换为 <%= page.permalink %>\n效果如下：\n\n    <div class=\"ds-thread\" data-thread-key=\"<%= page.path %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n\n  [1]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-09-23%20%E4%B8%8A%E5%8D%8811.40.36.png\n  [2]: http://7xlt6k.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-09-23%20%E4%B8%8A%E5%8D%8811.43.07.png\n  \n## 修改themes\\landscape\\layout\\_partial\\article.ejs模板\n\n把\n\n      <% if (!index && post.comments && config.disqus_shortname){ %>\n      <section id=\"comments\">\n        <div id=\"disqus_thread\">\n          <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n        </div>\n      </section>\n      <% } %>\n改为你复制的通用代码。","slug":"Hexo使用多说插件","published":1,"updated":"2015-09-23T07:38:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtsx002r2trneojlbywo"},{"title":"HScrollViewWithTitleAndSlide","toc":true,"date":"2015-10-20T09:13:11.000Z","_content":"\n## 功能说明\n1. 模仿LOFTER发现界面的页面切换效果\n2. 标题可以随着内容的滚动而滚动\n3. 下拉展示所有标题以供点选\n2. 下拉按钮的图片和勾选的图片可以自定义，每页最多显示的标题的个数可以自定义。\n3. 封装的比较完整，使用起来很简单，几句代码搞定。\n4. 使用Xcode7.0.1  Objective-C\n5. GitHub地址：https://github.com/SharonHu1990/HScrollViewWithTitleAndSlide\n\n<!-- more -->\n\n## 框架使用说明\n\n\n1. 拖拽HSlideScrollView文件夹到你的工程目录.\n2. 在需要使用该框架的ViewController中添加如下代码：\n\n代码示例：\n\n    /**\n     *  添加MySlideScrollView\n     */\n    -(void)addMySlideScrollView\n    {\n        CGRect slideScrollFrame = CGRectMake(0, 64, self.view.frame.size.width, self.view.frame.size.height-64);\n        NSArray *titlesArray = [[NSArray alloc] initWithObjects:@\"A\", @\"B\", @\"C\", @\"D\", @\"E\", @\"F\", @\"G\", @\"H\", @\"I\", @\"J\",     @\"K\", @\"L\", @\"M\", @\"N\", nil];\n        mySlideScrollView = [[HSlideScrollView alloc] initWithFrame:slideScrollFrame andTitleArrays:titlesArray     andTitleScrollerViewHight:40.f andNumverOfTitlesPerPage:7 andArrowImage:[UIImage imageNamed:@\"arrow_down\"] andTickImage:[UIImage         imageNamed:@\"tick\"] andTitleListTitle:@\"分类\"];\n         [self.view addSubview:mySlideScrollView];\n    }\n\n\n## 功能演示\n![功能演示](http://7xlt6k.com1.z0.glb.clouddn.com/SlideScrollView.gif)\n\n\n\n\n\n\n","source":"_posts/HScrollViewWithTitleAndSlide.md","raw":"title: HScrollViewWithTitleAndSlide\ntoc: true\ndate: 2015-10-20 17:13:11\ntags: [iOS, Demo]\ncategories: [iOS]\n---\n\n## 功能说明\n1. 模仿LOFTER发现界面的页面切换效果\n2. 标题可以随着内容的滚动而滚动\n3. 下拉展示所有标题以供点选\n2. 下拉按钮的图片和勾选的图片可以自定义，每页最多显示的标题的个数可以自定义。\n3. 封装的比较完整，使用起来很简单，几句代码搞定。\n4. 使用Xcode7.0.1  Objective-C\n5. GitHub地址：https://github.com/SharonHu1990/HScrollViewWithTitleAndSlide\n\n<!-- more -->\n\n## 框架使用说明\n\n\n1. 拖拽HSlideScrollView文件夹到你的工程目录.\n2. 在需要使用该框架的ViewController中添加如下代码：\n\n代码示例：\n\n    /**\n     *  添加MySlideScrollView\n     */\n    -(void)addMySlideScrollView\n    {\n        CGRect slideScrollFrame = CGRectMake(0, 64, self.view.frame.size.width, self.view.frame.size.height-64);\n        NSArray *titlesArray = [[NSArray alloc] initWithObjects:@\"A\", @\"B\", @\"C\", @\"D\", @\"E\", @\"F\", @\"G\", @\"H\", @\"I\", @\"J\",     @\"K\", @\"L\", @\"M\", @\"N\", nil];\n        mySlideScrollView = [[HSlideScrollView alloc] initWithFrame:slideScrollFrame andTitleArrays:titlesArray     andTitleScrollerViewHight:40.f andNumverOfTitlesPerPage:7 andArrowImage:[UIImage imageNamed:@\"arrow_down\"] andTickImage:[UIImage         imageNamed:@\"tick\"] andTitleListTitle:@\"分类\"];\n         [self.view addSubview:mySlideScrollView];\n    }\n\n\n## 功能演示\n![功能演示](http://7xlt6k.com1.z0.glb.clouddn.com/SlideScrollView.gif)\n\n\n\n\n\n\n","slug":"HScrollViewWithTitleAndSlide","published":1,"updated":"2015-10-20T09:23:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigisrtt0002v2trnkulj1enh"}],"PostAsset":[],"PostCategory":[{"post_id":"cigisrtoq00002trn19ztbqbo","category_id":"cigisrtqa00012trnklf8r655","_id":"cigisrtqe00042trn0aqtg3bx"},{"post_id":"cigisrtr4000i2trnzbnrxnsp","category_id":"cigisrtr5000j2trn1hy1m2wu","_id":"cigisrtr6000m2trnla26aioj"},{"post_id":"cigisrtru001e2trn6rr8uy7e","category_id":"cigisrtqa00012trnklf8r655","_id":"cigisrtrx001f2trntow8y4as"},{"post_id":"cigisrts3001o2trnieugq9ei","category_id":"cigisrtqa00012trnklf8r655","_id":"cigisrts4001p2trnvhdh5m7v"},{"post_id":"cigisrts8001u2trnwlm1e99t","category_id":"cigisrtsa001v2trn4irgtwmt","_id":"cigisrtsb001y2trnt66z8877"},{"post_id":"cigisrtsd00232trnct26qmbn","category_id":"cigisrtqa00012trnklf8r655","_id":"cigisrtsf00242trnwie847pr"},{"post_id":"cigisrtsk002a2trnzjbuowpa","category_id":"cigisrtqa00012trnklf8r655","_id":"cigisrtsl002b2trn9i514h7z"},{"post_id":"cigisrtsq002f2trnlaad59vj","category_id":"cigisrtqa00012trnklf8r655","_id":"cigisrtss002g2trn5hveo8uq"},{"post_id":"cigisrtt0002v2trnkulj1enh","category_id":"cigisrtqa00012trnklf8r655","_id":"cigisrtt1002w2trn899nah7k"}],"PostTag":[{"post_id":"cigisrtoq00002trn19ztbqbo","tag_id":"cigisrtqb00022trncezhgrwh","_id":"cigisrtqf00072trn3alic8ca"},{"post_id":"cigisrtoq00002trn19ztbqbo","tag_id":"cigisrtqd00032trnthed5w7b","_id":"cigisrtqf00082trnlgqb4x95"},{"post_id":"cigisrtoq00002trn19ztbqbo","tag_id":"cigisrtqe00052trn5aljffw5","_id":"cigisrtqf00092trn9ipj1zx9"},{"post_id":"cigisrtoq00002trn19ztbqbo","tag_id":"cigisrtqe00062trns28ju3l6","_id":"cigisrtqf000a2trn5mao3rn6"},{"post_id":"cigisrtr0000d2trna3tmqxv5","tag_id":"cigisrtr1000e2trnpr0gmu62","_id":"cigisrtr2000g2trn69tsy41l"},{"post_id":"cigisrtr0000d2trna3tmqxv5","tag_id":"cigisrtr2000f2trnau8w7hio","_id":"cigisrtr2000h2trnqbdell6t"},{"post_id":"cigisrtr4000i2trnzbnrxnsp","tag_id":"cigisrtr5000k2trnw6mc6jhz","_id":"cigisrtr6000n2trnd256u8b5"},{"post_id":"cigisrtr4000i2trnzbnrxnsp","tag_id":"cigisrtr1000e2trnpr0gmu62","_id":"cigisrtr7000o2trnm412qayb"},{"post_id":"cigisrtr4000i2trnzbnrxnsp","tag_id":"cigisrtr6000l2trnhevqrlrg","_id":"cigisrtr7000p2trnng92r24p"},{"post_id":"cigisrtr8000q2trnrkgm9het","tag_id":"cigisrtr9000r2trnttrfdebs","_id":"cigisrtra000u2trn9nha8xjg"},{"post_id":"cigisrtr8000q2trnrkgm9het","tag_id":"cigisrtra000s2trnqt7u7tgy","_id":"cigisrtra000v2trngzf2qtl9"},{"post_id":"cigisrtr8000q2trnrkgm9het","tag_id":"cigisrtra000t2trnph044evs","_id":"cigisrtrb000w2trn9huw8hfs"},{"post_id":"cigisrtrc000x2trniaaztzhf","tag_id":"cigisrtre000y2trnarueix8p","_id":"cigisrtrf00102trnnbmie7c0"},{"post_id":"cigisrtrc000x2trniaaztzhf","tag_id":"cigisrtrf000z2trn09qdbsye","_id":"cigisrtrf00112trnq8s0x3rg"},{"post_id":"cigisrtrh00122trn8s3pz60p","tag_id":"cigisrtri00132trn3bi57dkc","_id":"cigisrtrj00152trn05mo6xwh"},{"post_id":"cigisrtrh00122trn8s3pz60p","tag_id":"cigisrtri00142trncn6w0vuj","_id":"cigisrtrj00162trnhxpr7kf2"},{"post_id":"cigisrtrh00122trn8s3pz60p","tag_id":"cigisrtr1000e2trnpr0gmu62","_id":"cigisrtrj00172trnxqzsptl6"},{"post_id":"cigisrtrl00182trnxmrm6upg","tag_id":"cigisrtra000t2trnph044evs","_id":"cigisrtrt001b2trn8imabsmu"},{"post_id":"cigisrtrl00182trnxmrm6upg","tag_id":"cigisrtrr00192trnl641d78z","_id":"cigisrtrt001c2trnyzcwfi95"},{"post_id":"cigisrtrl00182trnxmrm6upg","tag_id":"cigisrtrs001a2trnuwzul5du","_id":"cigisrtrt001d2trn6tkj9xjr"},{"post_id":"cigisrtru001e2trn6rr8uy7e","tag_id":"cigisrtqd00032trnthed5w7b","_id":"cigisrtrx001h2trnl4iu3cnw"},{"post_id":"cigisrtru001e2trn6rr8uy7e","tag_id":"cigisrtrx001g2trnjc2fb0va","_id":"cigisrtrx001i2trn9n9f67yv"},{"post_id":"cigisrtru001e2trn6rr8uy7e","tag_id":"cigisrtqb00022trncezhgrwh","_id":"cigisrtrx001j2trnr6ac6o72"},{"post_id":"cigisrtry001k2trnsz9cejld","tag_id":"cigisrtr1000e2trnpr0gmu62","_id":"cigisrtrz001l2trnn63icf8p"},{"post_id":"cigisrts0001m2trn25deus9e","tag_id":"cigisrtra000t2trnph044evs","_id":"cigisrts2001n2trnv2f9eep0"},{"post_id":"cigisrts3001o2trnieugq9ei","tag_id":"cigisrtqd00032trnthed5w7b","_id":"cigisrts5001r2trno889yt1i"},{"post_id":"cigisrts3001o2trnieugq9ei","tag_id":"cigisrts4001q2trn7u6qkx1x","_id":"cigisrts5001s2trnax7qeidg"},{"post_id":"cigisrts3001o2trnieugq9ei","tag_id":"cigisrtqb00022trncezhgrwh","_id":"cigisrts5001t2trn7ssw4rfh"},{"post_id":"cigisrts8001u2trnwlm1e99t","tag_id":"cigisrtra000t2trnph044evs","_id":"cigisrtsb001z2trng6p6lwo3"},{"post_id":"cigisrts8001u2trnwlm1e99t","tag_id":"cigisrtri00142trncn6w0vuj","_id":"cigisrtsb00202trnwdnf5v18"},{"post_id":"cigisrts8001u2trnwlm1e99t","tag_id":"cigisrtsa001w2trn1igeu0hh","_id":"cigisrtsb00212trnkvtvdcc2"},{"post_id":"cigisrts8001u2trnwlm1e99t","tag_id":"cigisrtsa001x2trn3z96161y","_id":"cigisrtsb00222trniijqv084"},{"post_id":"cigisrtsd00232trnct26qmbn","tag_id":"cigisrtqd00032trnthed5w7b","_id":"cigisrtsf00262trnvdgftiki"},{"post_id":"cigisrtsd00232trnct26qmbn","tag_id":"cigisrtsf00252trn3y0y9lon","_id":"cigisrtsf00272trnq6pw1gg7"},{"post_id":"cigisrtsk002a2trnzjbuowpa","tag_id":"cigisrtqb00022trncezhgrwh","_id":"cigisrtsl002c2trn1n6n9x94"},{"post_id":"cigisrtsk002a2trnzjbuowpa","tag_id":"cigisrtqd00032trnthed5w7b","_id":"cigisrtsl002d2trnyrglvx6i"},{"post_id":"cigisrtsq002f2trnlaad59vj","tag_id":"cigisrtqd00032trnthed5w7b","_id":"cigisrtst002i2trn5x0j7rpa"},{"post_id":"cigisrtsq002f2trnlaad59vj","tag_id":"cigisrtst002h2trnrpmm0j0d","_id":"cigisrtst002j2trng98vkmyf"},{"post_id":"cigisrtsq002f2trnlaad59vj","tag_id":"cigisrtqb00022trncezhgrwh","_id":"cigisrtst002k2trn9byhti0b"},{"post_id":"cigisrtsu002l2trnqziv0a7u","tag_id":"cigisrtqb00022trncezhgrwh","_id":"cigisrtsw002o2trnt2ymoxm5"},{"post_id":"cigisrtsu002l2trnqziv0a7u","tag_id":"cigisrtsv002m2trn2yfpmrav","_id":"cigisrtsw002p2trn1fq4bfhi"},{"post_id":"cigisrtsu002l2trnqziv0a7u","tag_id":"cigisrtsw002n2trnp0umpukn","_id":"cigisrtsw002q2trnhyr5qryc"},{"post_id":"cigisrtsx002r2trneojlbywo","tag_id":"cigisrtqb00022trncezhgrwh","_id":"cigisrtsz002t2trno0h7melm"},{"post_id":"cigisrtsx002r2trneojlbywo","tag_id":"cigisrtsz002s2trnood2f1gx","_id":"cigisrtsz002u2trnupui04cp"},{"post_id":"cigisrtt0002v2trnkulj1enh","tag_id":"cigisrtqd00032trnthed5w7b","_id":"cigisrtt1002y2trnned1z2vu"},{"post_id":"cigisrtt0002v2trnkulj1enh","tag_id":"cigisrtt1002x2trnclrdozzz","_id":"cigisrtt2002z2trn5g1h93bi"}],"Tag":[{"name":"知识小集","_id":"cigisrtqb00022trncezhgrwh"},{"name":"iOS","_id":"cigisrtqd00032trnthed5w7b"},{"name":"Xcode","_id":"cigisrtqe00052trn5aljffw5"},{"name":"版本号","_id":"cigisrtqe00062trns28ju3l6"},{"name":"杂谈","_id":"cigisrtr1000e2trnpr0gmu62"},{"name":"读书札记","_id":"cigisrtr2000f2trnau8w7hio"},{"name":"电影","_id":"cigisrtr5000k2trnw6mc6jhz"},{"name":"感悟","_id":"cigisrtr6000l2trnhevqrlrg"},{"name":"水彩","_id":"cigisrtr9000r2trnttrfdebs"},{"name":"爱好","_id":"cigisrtra000s2trnqt7u7tgy"},{"name":"生活","_id":"cigisrtra000t2trnph044evs"},{"name":"程序人生","_id":"cigisrtre000y2trnarueix8p"},{"name":"编程习惯","_id":"cigisrtrf000z2trn09qdbsye"},{"name":"诗","_id":"cigisrtri00132trn3bi57dkc"},{"name":"随笔","_id":"cigisrtri00142trncn6w0vuj"},{"name":"生日","_id":"cigisrtrr00192trnl641d78z"},{"name":"爱","_id":"cigisrtrs001a2trnuwzul5du"},{"name":"UITableView","_id":"cigisrtrx001g2trnjc2fb0va"},{"name":"Archive Submission","_id":"cigisrts4001q2trn7u6qkx1x"},{"name":"总结","_id":"cigisrtsa001w2trn1igeu0hh"},{"name":"假期","_id":"cigisrtsa001x2trn3z96161y"},{"name":"EXC_BAD_ACCESS，调试","_id":"cigisrtsf00252trn3y0y9lon"},{"name":"Swift","_id":"cigisrtst002h2trnrpmm0j0d"},{"name":"Markdown","_id":"cigisrtsv002m2trn2yfpmrav"},{"name":"写作工具","_id":"cigisrtsw002n2trnp0umpukn"},{"name":"Hexo","_id":"cigisrtsz002s2trnood2f1gx"},{"name":"Demo","_id":"cigisrtt1002x2trnclrdozzz"}]}}